<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://hangx-ma.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hangx-ma.github.io/" rel="alternate" type="text/html" /><updated>2023-05-27T19:06:41+08:00</updated><id>https://hangx-ma.github.io/feed.xml</id><title type="html">一只豆腐</title><subtitle>Code, life and embedded system...
</subtitle><author><name>HangX-Ma</name><email>m-contour@qq.com</email></author><entry><title type="html">cs144-sp23, Lab Checkpoint 4: down the stack (the network interface)</title><link href="https://hangx-ma.github.io/2023/05/27/cs144-lab4.html" rel="alternate" type="text/html" title="cs144-sp23, Lab Checkpoint 4: down the stack (the network interface)" /><published>2023-05-27T00:00:00+08:00</published><updated>2023-05-27T00:00:00+08:00</updated><id>https://hangx-ma.github.io/2023/05/27/cs144-lab4</id><content type="html" xml:base="https://hangx-ma.github.io/2023/05/27/cs144-lab4.html"><![CDATA[<p>记录 cs144 Spring-23 Lab4: down the stack (the network interface) 的思路与实践难点。
<!--more--></p>
<ul>
  <li>CS144 Spring 2023 实验仓库 <a href="https://github.com/CS144/minnow">CS144/minnow</a>， 备份为 <a href="https://github.com/HangX-Ma/minnow">HangX-Ma/minnow</a> 进行版本回退即可。</li>
  <li>CS144 Spring 2023 Lab4 项目指导书 - <a href="https://github.com/HangX-Ma/cs144-sp23/blob/main/assignment-notes/check4.pdf">Lab Checkpoint 2: down the stack (the network interface)</a>。</li>
  <li>具体的项目实现在个人的 <a href="https://github.com/HangX-Ma/cs144-sp23">Github</a>。</li>
</ul>]]></content><author><name>HangX-Ma</name></author><category term="Course" /><category term="cs144" /><summary type="html"><![CDATA[记录 cs144 Spring-23 Lab4: down the stack (the network interface) 的思路与实践难点。]]></summary></entry><entry><title type="html">cs144-sp23, Lab Checkpoint 3: the TCP sender</title><link href="https://hangx-ma.github.io/2023/05/24/cs144-lab3.html" rel="alternate" type="text/html" title="cs144-sp23, Lab Checkpoint 3: the TCP sender" /><published>2023-05-24T00:00:00+08:00</published><updated>2023-05-24T00:00:00+08:00</updated><id>https://hangx-ma.github.io/2023/05/24/cs144-lab3</id><content type="html" xml:base="https://hangx-ma.github.io/2023/05/24/cs144-lab3.html"><![CDATA[<p>记录 cs144 Spring-23 Lab3: the TCP sender 的思路与实践难点。 前面一些内容看起来像翻译， 但其实也是做一遍逻辑梳理， 之后落实思路会更清晰一些。
<!--more--></p>
<ul>
  <li>CS144 Spring 2023 实验仓库 <a href="https://github.com/CS144/minnow">CS144/minnow</a>， 备份为 <a href="https://github.com/HangX-Ma/minnow">HangX-Ma/minnow</a> 进行版本回退即可。</li>
  <li>CS144 Spring 2023 Lab3 项目指导书 - <a href="https://github.com/HangX-Ma/cs144-sp23/blob/main/assignment-notes/check3.pdf">Lab Checkpoint 3: the TCP sender</a>。</li>
  <li>具体的项目实现在个人的 <a href="https://github.com/HangX-Ma/cs144-sp23">Github</a>。</li>
</ul>

<h2 id="1-内容简述">1. 内容简述</h2>

<p>Lab3 将实现 TCP 中的 <em><strong>TCPSender</strong></em>， 其需要完成的功能有：</p>

<ul>
  <li>跟踪 Receiver 的 <code class="language-plaintext highlighter-rouge">TCPReceiverMessage</code> 信息， 通过将 <em><strong>ByteStream</strong></em> 的数据以 TCP Segments 的格式不断发送， 尽可能地填满 window， 直到 window 满了或者 <em><strong>ByteStream</strong></em> 中没有任何东西可以发送。</li>
  <li>跟踪那些已经发送但还没有被接收的 segments， 通常将这些数据被称为 “outstanding segments”。</li>
  <li>若是这些 segments 在足够长的时间后没有没接收， 则重传这些 segments 数据。</li>
</ul>

<p>这些功能实现了 “automatic repeat request (ARQ)” 机制， <em><strong>TCPSender</strong></em> 的任务就是确保 <em><strong>TCPReceiver</strong></em> 能收到每个字节至少一次。</p>

<h2 id="2-tcpsender-如何监测丢包">2. TCPSender 如何监测丢包</h2>

<p><em><strong>TCPSender</strong></em> 会跟踪那些 outstanding segments 的状态， 周期性调用 <code class="language-plaintext highlighter-rouge">tick</code> 函数以指示这些 segments 自发出以来所经过的时间。 <em><strong>TCPSender</strong></em> 会在内部的存储空间存储 <code class="language-plaintext highlighter-rouge">TCPSenderMessages</code> 的信息并遍历这个集合， 找出那些 <strong>已发出但经过时间太久但还未被接收</strong> 的 segments 进行 <strong>数据超时重传</strong>， 直到所有的 <code class="language-plaintext highlighter-rouge">seqno</code> 都被接收。</p>

<p>那么如何界定 <strong>已发出但经过时间太久</strong> 这个定义就尤为重要， 太长的等待时间会增加通信延时， 而太短的等待时间则会浪费网络存储空间以及增大开销。 需要注意如下几点：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">tick</code> 函数每隔几毫秒需要调用一次， 记录自上一次调用以来经过的时间， 并以此记录 <em><strong>TCPSender</strong></em> 存在的总时长。 <code class="language-plaintext highlighter-rouge">time</code> 以及 <code class="language-plaintext highlighter-rouge">clock</code> 这类与操作系统和 CPU 相关的函数不允许调用， 否则会导致 TCP 工作异常。</li>
  <li><strong>retransmission timeout (RTO)</strong> 在 <em><strong>TCPSender</strong></em> 初始化时会初始化 <code class="language-plaintext highlighter-rouge">_initial_retransmission_timeout</code>， 该值始终不变而 RTO 会不断改变 （可能为初值的两倍， 或者等于初值） 以记录 outstanding segments 在超时重传前所经过的时间。</li>
  <li>重传定时器 timer 以 tick 为时间单位， timer 会在某个时间启动， 在经过 RTO 时间后失效。</li>
  <li>包含数据的 segment 被传输后 timer 会被启动， 直到经过 RTO 毫秒后 timer 会失效。</li>
  <li>当所有的 outstanding 数据都被接收后， 服务于重传机制的 timer 将会被停止。</li>
  <li>
    <p><a href="#func_tick">以下信息与 <em>tick</em> 函数的实现密切相关</a></p>

    <p>若是 <code class="language-plaintext highlighter-rouge">tick</code> 被调用而 timer 已经失效了：</p>

    <ol>
      <li>将时间最早的未被接收的 segment 进行重传 （<code class="language-plaintext highlighter-rouge">seqno</code> 最小的那个）。</li>
      <li>若此时 window size 非零：
        <ul>
          <li>跟踪记录连续 <strong>重传的数量</strong>， 并在每次重传后进行累加， <em><strong>TCPConnection</strong></em> 会使用这个信息用以判断 TCP 连接的可靠性， 太多连续的重传意味着 TCP 连接不稳定需要终止。</li>
          <li>设置 RTO 值为原来的两倍。 “exponential backoff” 以降低较差网络的重传速度， 避免加深网络的拥堵。</li>
        </ul>
      </li>
      <li>重置 timer 并启动， 使其在 RTO 毫秒之后失效 （需要考虑 RTO 已经翻倍）。</li>
    </ol>
  </li>
  <li>
    <p><a href="#func_receive">以下信息与 <em>receive</em> 函数的实现密切相关</a></p>

    <p>当接收方给发送方传输了 <code class="language-plaintext highlighter-rouge">ackno</code> 表示成功接收了新的数据 （这个 <code class="language-plaintext highlighter-rouge">ackno</code> 比之前任何一个的 <code class="language-plaintext highlighter-rouge">absolute seqno</code> 都要大）:</p>

    <ol>
      <li>需要将 RTO 设置为其初始值。</li>
      <li>如果发送方仍有 outstanding 的数据， timer 需要重启并将会在 RTO 毫秒后失效。</li>
      <li>重置前述的 <strong>连续重传数量</strong> 为 0。</li>
    </ol>
  </li>
</ul>

<h2 id="3-tcp-sender-实现">3. TCP Sender 实现</h2>

<div align="center">
    <img src="/norobots/images/2023-05-23-cs144-lab3/space-structure.png" alt="space structure" width="600" />
    <br />
    <font size="2" color="#999"><u>space structure, HangX-Ma</u></font>
</div>

<p>需要实现以下 5 个接口并增添自己所需的变量以及 helper functions。 上图是 Sender 端所看到的内存结构以及 <code class="language-plaintext highlighter-rouge">seqno</code> 的分布。</p>

<ul>
  <li>
    <p><em><strong>push:</strong></em> 不断读取新的字节， 并组装生成 <code class="language-plaintext highlighter-rouge">TCPSenderMessage</code>。 需要使满足 window 尺寸的 <code class="language-plaintext highlighter-rouge">TCPSenderMessage</code> 尽可能大， 但上限是 <code class="language-plaintext highlighter-rouge">TCPConfig::MAX PAYLOAD SIZE (1452 bytes)</code>。 <code class="language-plaintext highlighter-rouge">TCPSenderMessage::sequence length()</code> 会用以计量该 segment 占用的 <code class="language-plaintext highlighter-rouge">seqno</code> 的尺寸， SYN 和 FIN 都需要计算在内。</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/* Push bytes from the outbound stream */</span>
  <span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="n">Reader</span> <span class="o">&amp;</span><span class="n">outbound_stream</span><span class="p">);</span>
</code></pre></div>    </div>

    <blockquote>
      <p>这里也是需要注意 window size 最小应当为 1。 另外我们需要两个布尔变量来记录是否需要给传输的 <em><strong>TCPSenderMessage</strong></em> 增加 SYN 标志或者 FIN 标志。 我们以如下顺序对 msg 进行组装： SYN， payload， FIN。 需要注意的是， FIN 标志设定有一定的条件限制：</p>

      <ul>
        <li>FIN 之前没设定过；</li>
        <li>Reader 已经没有数据了；</li>
        <li>塞完 SYN 和 payload 之后我们的 window size 还能容纳一个 FIN 的位置
如果本次 FIN 没有传输， 就下次传输， 不会有什么影响。</li>
      </ul>

      <p>另外， 只有在 outstanding segments 清空后我们才需要在传输新的 <em><strong>TCPSenderMessage</strong></em> 时重置 timer， 否则 timer 将在很大程度上失去其基本作用。 每次传输都需要更新 outstanding segments 集合以及发送的 <code class="language-plaintext highlighter-rouge">seqno</code> 数量， <code class="language-plaintext highlighter-rouge">next_seqno</code> 等信息。</p>
    </blockquote>

    <p class="info">cs144 指导书特地说明了 window size 为零的情况， 仅适用于 <code class="language-plaintext highlighter-rouge">push()</code> 函数。 这时 <em><strong>TCPSender</strong></em> 仍需要发送一个独立的字节， 虽然会被 <em><strong>TCPReceiver</strong></em> 拒绝接收但 <em><strong>TCPReceiver</strong></em> 会返回一个 <code class="language-plaintext highlighter-rouge">TCPReceiverMessage</code> 数据， 这个信息可以告知 <em><strong>TCPSender</strong></em> window 中是否有新用于传输的空间。 否则 <em><strong>TCPSender</strong></em> 将无法确定何时发送新的 segment。</p>
  </li>
  <li>
    <p><em><strong>maybe_send:</strong></em> 必要时发送 <code class="language-plaintext highlighter-rouge">TCPSenderMessage</code> 或者为空。</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">TCPSenderMessage</span><span class="o">&gt;</span> <span class="n">maybe_send</span><span class="p">();</span>
</code></pre></div>    </div>

    <blockquote>
      <p>我们需要额外创建一个队列变量 <code class="language-plaintext highlighter-rouge">segments_out_</code> 来管理需要发送的 segments， 使用队列可以保证传输的先后顺序。 仅在这个队列的元素数量不为零且收到 SYN 信号才返回队列头部的那个数据， 并将其从队列头部移除。</p>
    </blockquote>
  </li>
  <li>
    <p><em><strong>receive:</strong></em> <a id="func_receive"></a> 接收的 window 范围是 \([ackno, ackno + window size]\)。 <em><strong>TCPSender</strong></em> 需要遍历 outstanding segments 集合将其中已经被 ACK 的部分移除 （<code class="language-plaintext highlighter-rouge">ackno</code> 比 segments 中所有的 <code class="language-plaintext highlighter-rouge">seqno</code> 都要大的那些 segments）。</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/* Receive an act on a TCPReceiverMessage from the peer's receiver */</span>
  <span class="kt">void</span> <span class="nf">receive</span><span class="p">(</span><span class="k">const</span> <span class="n">TCPReceiverMessage</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</code></pre></div>    </div>

    <blockquote>
      <p>我们只需要按照 <a href="#2-tcpsender-如何监测丢包">2.TCPSender 如何监测丢包</a> 中的最后一条逻辑写代码就行。</p>

      <p>这里需要注意， 接收的 <code class="language-plaintext highlighter-rouge">TCPReceiveMessage</code> 中的 <code class="language-plaintext highlighter-rouge">ackno</code> 可能为空， 这时候不能直接返回， 有可能是我们传输了一个 <em><strong>empty message</strong></em> 去获取 window size 而返回的一个包。 因此， 我们需要更新 <code class="language-plaintext highlighter-rouge">window_size_</code> 变量， 除此之外就什么都不做了。</p>

      <p>或者收到的这个 <code class="language-plaintext highlighter-rouge">ackno</code> 比我们当前保存的 <code class="language-plaintext highlighter-rouge">next_seqno</code> 都要大， 这可能是一个错误信息需要丢弃这段数据。</p>
    </blockquote>
  </li>
  <li>
    <p><em><strong>tick:</strong></em> <a id="func_tick"></a> 计时单位， 得到与上次该函数被调用的时间间隔。</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/* Time has passed by the given # of milliseconds since the last time the tick() method was called. */</span>
  <span class="kt">void</span> <span class="nf">tick</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">ms_since_last_tick</span><span class="p">);</span>
</code></pre></div>    </div>

    <blockquote>
      <p>除了要创建一个 <code class="language-plaintext highlighter-rouge">timer_</code> 变量存储时间外， 在 tick 中还需要做 <a href="#2-tcpsender-如何监测丢包">2.TCPSender 如何监测丢包</a> 中的几件事：</p>

      <ol>
        <li>若 outstanding segments 存在且 timer 失效， 重传时间最早的那个 segments。</li>
        <li>window size 非零时累加连续重传数量， 并进行 “exponential backoff”。</li>
        <li>重置 timer 的值为 0， 为下一次重传准备。</li>
      </ol>
    </blockquote>
  </li>
  <li>
    <p><em><strong>send_empty_message:</strong></em> 长度为零并且 <code class="language-plaintext highlighter-rouge">seqno</code> 正确的 <code class="language-plaintext highlighter-rouge">TCPSenderMessage</code>， 在 <em><strong>TCPReceiver</strong></em> 希望通过 <code class="language-plaintext highlighter-rouge">TCPReceiverMessage</code> 获取一些特定信息的时候特别有用， 这个和 <code class="language-plaintext highlighter-rouge">push</code> 中的那个想法很类似。</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/* Generate an empty TCPSenderMessage */</span>
  <span class="n">TCPSenderMessage</span> <span class="n">send_empty_message</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</code></pre></div>    </div>

    <blockquote>
      <p>这种长度为 0 的 segments 不需要被监测并纳入 outstanding segments 用以重传。 我们只需要返回一个仅有 <code class="language-plaintext highlighter-rouge">ackno</code> 被赋值为下一个需要接收的字节的 <code class="language-plaintext highlighter-rouge">seqno</code> 的 <code class="language-plaintext highlighter-rouge">TCPSenderMessage</code>。</p>
    </blockquote>
  </li>
</ul>

<p class="warning"><em><strong>FAQs and special cases</strong></em> 中的信息都很有帮助， 可以当作一种提供解题思路的 Hints。</p>

<h3 id="helper-functions">Helper Functions</h3>

<p>简化 <code class="language-plaintext highlighter-rouge">seqno</code> 与 <code class="language-plaintext highlighter-rouge">abs_seqno</code> 转换， 使用如下两个 helper functions 即可满足需求。 之后在给 <code class="language-plaintext highlighter-rouge">TCPSenderMessage</code> 中的 <code class="language-plaintext highlighter-rouge">ackno</code> 赋值就很方便了。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">uint64_t</span> <span class="n">get_next_abs_seqno_</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">next_abs_seqno_</span><span class="p">;</span> <span class="p">};</span>
<span class="n">Wrap32</span> <span class="n">get_next_seqno</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">isn_</span> <span class="o">+</span> <span class="n">next_abs_seqno_</span><span class="p">;</span> <span class="p">};</span>
</code></pre></div></div>

<h2 id="4-坑点记录">4. 坑点记录</h2>

<h3 id="41-the-test-retx-syn-twice-at-the-right-times-then-ack-failed">4.1 <em>The test “Retx SYN twice at the right times, then ack” failed.</em></h3>

<p>这个问题是初始化 window size 不正确导致的， 在文档里的 FAQs 部分有这么一段：</p>

<p>Q: <em>What should my TCPSender assume as the receiver’s window size before I’ve gotten an ACK from the receiver?</em>
<br />
A: One.</p>

<p>当时我将 <code class="language-plaintext highlighter-rouge">window_size_</code> 初始化为 0， 结果在调用 <code class="language-plaintext highlighter-rouge">tick</code> 函数后 <code class="language-plaintext highlighter-rouge">window_size_ &gt; 0</code> 这条条件判断语句永远不满足， <code class="language-plaintext highlighter-rouge">RTO_timeout_</code> 永远无法进行翻倍。 正确的做法是将 window size 初始化为 1。</p>

<h3 id="42-the-test-retx-syn-until-too-many-retransmissions-failed">4.2 <em>The test “Retx SYN until too many retransmissions” failed.</em></h3>

<p><code class="language-plaintext highlighter-rouge">RTO_timeout</code> 翻倍， 但我以为是初始值翻倍就直接设定成了 <code class="language-plaintext highlighter-rouge">RTO_timeout = 2 * initial_RTO_ms_</code>， 实际上指导书就是说 <em><strong>Double the value of RTO</strong></em> 并且说明是 <em><strong>exponential backoff</strong></em> （给的提示很明显 :joy:）。</p>

<h3 id="5-测试结果">5. 测试结果</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
      Start 28: send_connect
27/36 Test <span class="c">#28: send_connect .....................   Passed    0.09 sec</span>
      Start 29: send_transmit
28/36 Test <span class="c">#29: send_transmit ....................   Passed    1.11 sec</span>
      Start 30: send_retx
29/36 Test <span class="c">#30: send_retx ........................   Passed    0.08 sec</span>
      Start 31: send_window
30/36 Test <span class="c">#31: send_window ......................   Passed    0.35 sec</span>
      Start 32: send_ack
31/36 Test <span class="c">#32: send_ack .........................   Passed    0.08 sec</span>
      Start 33: send_close
32/36 Test <span class="c">#33: send_close .......................   Passed    0.09 sec</span>
      Start 34: send_extra
33/36 Test <span class="c">#34: send_extra .......................   Passed    0.16 sec</span>
      Start 36: compile with optimization
34/36 Test <span class="c">#36: compile with optimization ........   Passed   18.01 sec</span>
      Start 37: byte_stream_speed_test
             ByteStream throughput: 1.02 Gbit/s
35/36 Test <span class="c">#37: byte_stream_speed_test ...........   Passed    0.45 sec</span>
      Start 38: reassembler_speed_test
             Reassembler throughput: 1.83 Gbit/s
36/36 Test <span class="c">#38: reassembler_speed_test ...........   Passed    0.85 sec</span>

100% tests passed, 0 tests failed out of 36

Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span> 170.63 sec
Built target check3
</code></pre></div></div>]]></content><author><name>HangX-Ma</name></author><category term="Course" /><category term="cs144" /><summary type="html"><![CDATA[记录 cs144 Spring-23 Lab3: the TCP sender 的思路与实践难点。 前面一些内容看起来像翻译， 但其实也是做一遍逻辑梳理， 之后落实思路会更清晰一些。]]></summary></entry><entry><title type="html">cs144-sp23, Lab Checkpoint 2: the TCP receiver</title><link href="https://hangx-ma.github.io/2023/05/23/cs144-lab2.html" rel="alternate" type="text/html" title="cs144-sp23, Lab Checkpoint 2: the TCP receiver" /><published>2023-05-23T00:00:00+08:00</published><updated>2023-05-23T00:00:00+08:00</updated><id>https://hangx-ma.github.io/2023/05/23/cs144-lab2</id><content type="html" xml:base="https://hangx-ma.github.io/2023/05/23/cs144-lab2.html"><![CDATA[<p>记录 cs144 Spring-23 Lab2: the TCP receiver 的思路与实践难点。
<!--more--></p>
<ul>
  <li>CS144 Spring 2023 实验仓库 <a href="https://github.com/CS144/minnow">CS144/minnow</a>， 备份为 <a href="https://github.com/HangX-Ma/minnow">HangX-Ma/minnow</a> 进行版本回退即可。</li>
  <li>CS144 Spring 2023 Lab2 项目指导书 - <a href="https://github.com/HangX-Ma/cs144-sp23/blob/main/assignment-notes/check2.pdf">Lab Checkpoint 2: the TCP receiver</a>。</li>
  <li>具体的项目实现在个人的 <a href="https://github.com/HangX-Ma/cs144-sp23">Github</a>。</li>
</ul>

<h2 id="1-内容简述">1. 内容简述</h2>

<p>Lab2 将实现 TCP 协议的具体细节， <em><strong>TCPReceiver</strong></em>， 以处理传入的字符流数据。 如果还记得 Lab1 中的实验框图， <em><strong>TCPReceiver</strong></em> 是 <em><strong>Reassembler</strong></em> 和 <em><strong>ByteStream</strong></em> 的上层封装， 它通过 <code class="language-plaintext highlighter-rouge">receive()</code> 函数从 peer 端接收数据， 经过 <em><strong>Reassembler</strong></em> 处理写入 <em><strong>ByteStream</strong></em> 缓存， 应用层就可以通过 <em><strong>TCPSocket</strong></em> 读取数据。</p>

<p>在接收 peer 端数据的同时， <em><strong>TCPReceiver</strong></em> 通过 <code class="language-plaintext highlighter-rouge">send()</code> 函数承担着告知 peer 一些重要信息的职责， 这些信息包括这两个部分：</p>

<ul>
  <li><strong>Acknowledgment:</strong> <code class="language-plaintext highlighter-rouge">first_unassembled_index</code> 又称 <code class="language-plaintext highlighter-rouge">ackno</code>， 是 <em><strong>TCPReceiver</strong></em> 从 peer 发送端希望收到的 <strong>第一个字节的索引号</strong>。</li>
  <li><strong>Flow Control:</strong> <code class="language-plaintext highlighter-rouge">window size</code>， 是输出到 ByteStream 的剩余空间， 限制了 <em><strong>TCPSender</strong></em> 发送数据的 <em><strong>index</strong></em> 的实际范围。 通过这个 <code class="language-plaintext highlighter-rouge">window</code>， <em><strong>TCPReceiver</strong></em> 能够 <strong>对输入的数据流量进行控制</strong>， 限制发送端的数据直到接收端准备好继续接收。</li>
</ul>

<blockquote>
  <p>通常将 <code class="language-plaintext highlighter-rouge">ackno</code> 称作 <code class="language-plaintext highlighter-rouge">window</code> 的索引左边界 （Smallest Index）， 将 <code class="language-plaintext highlighter-rouge">ackno + window size</code> 称作 <code class="language-plaintext highlighter-rouge">window</code> 的索引右边界 （Largest Index）。</p>
</blockquote>

<h2 id="2-64-bit-索引与-32-bit-序列号的转换">2. 64-bit 索引与 32-bit 序列号的转换</h2>

<div align="center">
    <img src="/norobots/images/2023-05-23-cs144-lab2/tcp-segment.png" alt="TCP segment, wikipedia" width="600" />
    <br />
    <font size="2" color="#999"><u>TCP segment, wikipedia</u></font>
</div>

<p><em><strong>Reassembler</strong></em> 重组 substrings 时每一个字节的索引号都是 64-bit， 并且其首位 <em><strong>index</strong></em> 始终是从零开始。 这是一组在当前技术条件下永远不可能溢出的数据流索引号组。 但是在 TCP segment 的头部数据中， 这一组 <code class="language-plaintext highlighter-rouge">sequence number</code> 又被称为 <code class="language-plaintext highlighter-rouge">seqno</code> 是 32-bit 的， 这组索引号与前述的数据流索引号在长度上不匹配。 32-bit 的数据可以在 100 gigabits/sec 的传输速率下在 1/3 秒内传输完， 因而其可能溢出。 这种不匹配引入了一些复杂性：</p>

<ul>
  <li>TCP 的数据流长度是不固定的， 但数据段的头部 <code class="language-plaintext highlighter-rouge">seqno</code> 仅有 32 位， 4 GiB 大小。 当 <code class="language-plaintext highlighter-rouge">seqno</code> 到达 \(2^{32} - 1\) 大小后， <code class="language-plaintext highlighter-rouge">seqno</code> 会置零。</li>
  <li>TCP <code class="language-plaintext highlighter-rouge">seqno</code> 的起始位置是任意的， ISN （Initial Sequence Number） 可以是 32-bit 中的任意值， 避免数据混淆和提高协议的鲁棒性。 那么 ISN 就代表了当前数据流的 “零点 （zero point）”， 或称其为 SYN （beginning of stream）。</li>
  <li>有 SYN （beginning of stream） 自然也有 FIN （end of stream）， 它们不属于数据流中的任意字节， 仅作为数据流的起始和末尾的两个标识符存在， 但他们分别占有一个 <code class="language-plaintext highlighter-rouge">seqno</code>。</li>
</ul>

<div align="center">
    <img src="/norobots/images/2023-05-23-cs144-lab2/ex-three-types-number.png" alt="Example of Sequence Numbers, Absolute Sequence Numbers, Stream Indices" width="400" />
    <img src="/norobots/images/2023-05-23-cs144-lab2/three-types-number.png" alt="Sequence Numbers, Absolute Sequence Numbers, Stream Indices" width="600" />
    <br />
    <font size="2" color="#999"><u>Sequence Numbers, Absolute Sequence Numbers, Stream Indices</u></font>
</div>

<p>cs144 区分了三种类型的索引值， 并给出了一个 “cat” 数据的例子。 <code class="language-plaintext highlighter-rouge">seqno</code>， <code class="language-plaintext highlighter-rouge">absolute seqno</code>， 以及 <code class="language-plaintext highlighter-rouge">stream index</code>， 这些索引需要我们实现相互之间的转换， 并保持转换前后不同数据的这三类索引值之间的关系一致。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">wrap</code> 是将 <code class="language-plaintext highlighter-rouge">absolute seqno</code> 转换为 <code class="language-plaintext highlighter-rouge">seqno</code>， 64-bit 数据本就是 32-bit 数据的倍数， 进行 <code class="language-plaintext highlighter-rouge">absolute seqno</code> 截断直接和 <code class="language-plaintext highlighter-rouge">zero_point</code> 加和就是 wrap 后的结果。
    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">uint32_t</code> 数据类型自动将溢出部分进行了 wrap 操作。</p>
    </blockquote>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">static</span> <span class="n">Wrap32</span> <span class="nf">wrap</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">n</span><span class="p">,</span> <span class="n">Wrap32</span> <span class="n">zero_point</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">unwrap</code> 麻烦一些， 但指导书表明 10 行也能搞定 :joy:。 给了 <code class="language-plaintext highlighter-rouge">absolute seqno</code> 中的 <code class="language-plaintext highlighter-rouge">checkpoint</code> 以及 <code class="language-plaintext highlighter-rouge">seqno</code> 中的 <code class="language-plaintext highlighter-rouge">zero_point</code>， <code class="language-plaintext highlighter-rouge">checkpoint</code> 是 \([SYN,FIN] \in {64 bit}\) 之间的任意一个值。 在指导书中有这么一句：</p>

    <p><em>“Given a sequence number (the Wrap32), the Initial Sequence Number (zero point), and an absolute checkpoint sequence number, find the corresponding absolute sequence number that is closest to the checkpoint.”</em></p>

    <p>说明我们实际要转换的是一个 <code class="language-plaintext highlighter-rouge">Wrap32</code> 类型的数据， 这个数据源就是 <code class="language-plaintext highlighter-rouge">this-&gt;raw_data_</code>， 属于 <code class="language-plaintext highlighter-rouge">seqno</code>。</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">uint64_t</span> <span class="n">unwrap</span><span class="p">(</span><span class="n">Wrap32</span> <span class="n">zero_point</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">checkpoint</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</code></pre></div>    </div>

    <p>对于 <code class="language-plaintext highlighter-rouge">checkpoint</code> 的作用指导书也说的很明确， <code class="language-plaintext highlighter-rouge">seqno</code> 中 17 可能对应着 <code class="language-plaintext highlighter-rouge">absolute seqno</code> 的 17， 也可能是 \(17 + 2^{32}\) 等等。 我们确定变量 <code class="language-plaintext highlighter-rouge">seqno_offset = this-&gt;raw_data_ - zero_point.raw_data_</code>， 写过 Lab0 和 Lab1 应该都清楚， <code class="language-plaintext highlighter-rouge">checkpoint</code> 是 first_unassembled_index， 它应当比传入的 <code class="language-plaintext highlighter-rouge">seqno_offset</code> 的值要小， 若 <code class="language-plaintext highlighter-rouge">checkpoint &gt;= seqno_offset</code>， 我们就需要找到具体偏移了几个 \(2^{32}\)， 那最终的 <code class="language-plaintext highlighter-rouge">absolute seqno = seqno_offset + UINT32_SIZE_num * UINT32_SIZE</code>。</p>
  </li>
</ul>

<h2 id="3-tcp-receiver-实现">3. TCP Receiver 实现</h2>

<p>cs144 提供了 <code class="language-plaintext highlighter-rouge">TCPSenderMessage</code> 和 <code class="language-plaintext highlighter-rouge">TCPReceiverMessage</code>, 前者用于 <code class="language-plaintext highlighter-rouge">receive</code> 后者用于 <code class="language-plaintext highlighter-rouge">send</code>。</p>

<ul>
  <li><em><strong>receive：</strong></em> 该部分有两个要求
    <ol>
      <li>在必要时， 也就是 message 中包含 SYN 时， 需要保存这个 SYN 的 <code class="language-plaintext highlighter-rouge">seqno</code>。</li>
      <li>将 payload 部分的数据推送给 <em><strong>Reassembler</strong></em>， FIN 作为标识符控制 push 过程的终止。</li>
    </ol>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">void</span> <span class="nf">receive</span><span class="p">(</span><span class="n">TCPSenderMessage</span> <span class="n">message</span><span class="p">,</span> <span class="n">Reassembler</span> <span class="o">&amp;</span><span class="n">reassembler</span><span class="p">,</span> <span class="n">Writer</span> <span class="o">&amp;</span><span class="n">inbound_stream</span><span class="p">);</span>
</code></pre></div>    </div>

    <p>可以明确的是， 在 <em><strong>TCPReceiver</strong></em> 还没有接收到 SYN 时， 所有的数据都不应当被送入 <em><strong>Reassembler</strong></em>， 因为此时的数据传输还没有开始， 所以我们需要有一个标志位表明数据开始传输。</p>

    <p>另外传输的时候使用的是 <code class="language-plaintext highlighter-rouge">stream_index</code>， 而我们得到的是 <code class="language-plaintext highlighter-rouge">seqno</code>， 首先需要将 <code class="language-plaintext highlighter-rouge">seqno</code> 转为 <code class="language-plaintext highlighter-rouge">absolute seqno</code>， 我们已经写好了 <code class="language-plaintext highlighter-rouge">unwarp</code> 函数， 需要提供 <code class="language-plaintext highlighter-rouge">checkpoint</code>。 <code class="language-plaintext highlighter-rouge">checkpoint</code> 是 <em>first_unassembled_index</em>， 也就是下一个需要被 buffer 存储的字节。 在 Lab0 中我们完成的 <code class="language-plaintext highlighter-rouge">Writer</code> 类有一个 <code class="language-plaintext highlighter-rouge">bytes_pushed()</code> 函数， <code class="language-plaintext highlighter-rouge">bytes_pushed() + 1 = checkpoint</code>。</p>

    <p><code class="language-plaintext highlighter-rouge">absolute_seqno</code> 转换为 <code class="language-plaintext highlighter-rouge">stream_index</code> 时需要考虑当前的 message 是否有 SYN 部分。 我们给 <code class="language-plaintext highlighter-rouge">unwrap</code> 提供的 <code class="language-plaintext highlighter-rouge">zero_point</code> 是以 SYN 对应的 <code class="language-plaintext highlighter-rouge">seqno</code>， 若 SYN 在当前的 message 中不存在， 则 <code class="language-plaintext highlighter-rouge">zero_point</code> 应当为当前 payload 的第一个字节。 所以有如下转换满足：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">uint64_t</span> <span class="n">stream_index</span> <span class="o">=</span> <span class="n">abs_seqno</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">message</span><span class="p">.</span><span class="n">SYN</span><span class="p">;</span>
</code></pre></div>    </div>

    <p>之后我们只需要提供 <code class="language-plaintext highlighter-rouge">inbound_stream.insert()</code> 所需要的各个变量即可。</p>
  </li>
  <li>
    <p><em><strong>send：</strong></em> 这里只需要注意只有 <code class="language-plaintext highlighter-rouge">ackno</code> 是 optional 属性， <code class="language-plaintext highlighter-rouge">window_size</code> 是每次都要发送的。 如果已经收到 FIN 那段 message， 满足 <code class="language-plaintext highlighter-rouge">inbound_stream.is_closed() == true</code> 那我们需要增加 FIN 部分的长度。 但也别忘了传输开始后， SYN 也是占有一个 <code class="language-plaintext highlighter-rouge">seqno</code> 位置的。</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">TCPReceiverMessage</span> <span class="n">send</span><span class="p">(</span><span class="k">const</span> <span class="n">Writer</span> <span class="o">&amp;</span><span class="n">inbound_stream</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="4-测试结果">4. 测试结果</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cs144@cs144-ubuntu22:~/cs144-sp23/minnow<span class="nv">$ </span>cmake <span class="nt">--build</span> build <span class="nt">--target</span> check2
Test project /home/cs144/cs144-sp23/minnow/build
      Start  1: compile with bug-checkers
 1/29 Test  <span class="c">#1: compile with bug-checkers ........   Passed   20.37 sec</span>
 ...
      Start 21: recv_connect
20/29 Test <span class="c">#21: recv_connect .....................   Passed    0.09 sec</span>
      Start 22: recv_transmit
21/29 Test <span class="c">#22: recv_transmit ....................   Passed    0.75 sec</span>
      Start 23: recv_window
22/29 Test <span class="c">#23: recv_window ......................   Passed    0.09 sec</span>
      Start 24: recv_reorder
23/29 Test <span class="c">#24: recv_reorder .....................   Passed    0.09 sec</span>
      Start 25: recv_reorder_more
24/29 Test <span class="c">#25: recv_reorder_more ................   Passed    1.86 sec</span>
      Start 26: recv_close
25/29 Test <span class="c">#26: recv_close .......................   Passed    0.09 sec</span>
      Start 27: recv_special
26/29 Test <span class="c">#27: recv_special .....................   Passed    0.10 sec</span>
      Start 28: compile with optimization
27/29 Test <span class="c">#28: compile with optimization ........   Passed   18.11 sec</span>
      Start 29: byte_stream_speed_test
             ByteStream throughput: 0.63 Gbit/s
28/29 Test <span class="c">#29: byte_stream_speed_test ...........   Passed    0.71 sec</span>
      Start 30: reassembler_speed_test
             Reassembler throughput: 1.33 Gbit/s
29/29 Test <span class="c">#30: reassembler_speed_test ...........   Passed    1.23 sec</span>

100% tests passed, 0 tests failed out of 29

Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>  47.45 sec
Built target check2
</code></pre></div></div>

<h2 id="website">Website</h2>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">Transmission Control Protocol - wikipedia</a></li>
</ul>]]></content><author><name>HangX-Ma</name></author><category term="Course" /><category term="cs144" /><summary type="html"><![CDATA[记录 cs144 Spring-23 Lab2: the TCP receiver 的思路与实践难点。]]></summary></entry><entry><title type="html">私有化 Git Pages 源码仓库</title><link href="https://hangx-ma.github.io/2023/05/21/protect-source-data.html" rel="alternate" type="text/html" title="私有化 Git Pages 源码仓库" /><published>2023-05-21T00:00:00+08:00</published><updated>2023-05-21T00:00:00+08:00</updated><id>https://hangx-ma.github.io/2023/05/21/protect-source-data</id><content type="html" xml:base="https://hangx-ma.github.io/2023/05/21/protect-source-data.html"><![CDATA[<h2 id="1-前言">1. 前言</h2>

<p>被一件事儿恶心到了， 发现最开始发在博客园上的文章被爬到了一个不知名的小网站， 没有署名， 没有注明来源。 真的对这种侵犯个人权利的事情感到恶心， 至少引用和转载文章需要注明来源。 国内互联网的内容同质化严重， 优质内容也逐渐减少不是没有道理的。</p>

<p>一气之下把 cnblogs 的内容都删掉了。</p>

<p>后来又想了想什么地方造成了数据外泄， 毕竟 markdown 数据也是保存在自己的私有仓库中， 估计 content 部分的内容被精准地洗劫了， 而且图片是上传在博客园的服务器上的， 被爬走还能正常显示， 这和在 Git Pages 中用相对地址引用还有区别。</p>

<p>感觉自己的 Git Pages 把源码都泄露在外头无异于数据裸奔， 另外 <code class="language-plaintext highlighter-rouge">sitemap.xml</code> 每次都需要自己去手动更新， 明明 jekyll-sitemap 插件能够将这件事情自动化处理， 于是产生了分离源码仓库和展示仓库的想法。</p>

<h2 id="2-私有化与自动化部署">2. 私有化与自动化部署</h2>

<p>实现的思路很清晰， 通过 Github Action 实现私有仓库的数据编译， 再将编译后的内容推送到目标公有仓库中， 所有的内容均对外不可见就完成了源码的私有化和部署的公有化。</p>

<div class="mermaid" align="center">
flowchart LR
    p1(Private Repository)
    p2(Git Action)
    p3(Public Repository)
    style p1 fill:#4F94CD,stroke:#363636,stroke-width:2px,color:#F5F5F5
    style p2 fill:#DCDCDC,stroke:#363636,color:#8B8B7A,color:#696969
    style p3 fill:#FF6A6A,stroke:#363636,stroke-width:2px,color:#F5F5F5
    p1 --&gt; p2
    p2 --&gt;|Compile/Push| p3
</div>

<p>需要在自己的源码仓库中创建 <code class="language-plaintext highlighter-rouge">.github/workflows/jekyll.yml</code> 文件， 当然文件名可以自定义。 这样 Git Action 就可以识别这个配置文件的内容， 这个仓库就能执行配置文件定义的各个步骤。 在其中复制粘贴如下代码， 将其中带有提示性的大写的字符都替换为自己的配置。 但需要注意的是， 我们需要通过 <code class="language-plaintext highlighter-rouge">ssh-keygen -t rsa</code> 生成用于该仓库推送的一对密钥， 将私有密钥填写在私有仓库的 <code class="language-plaintext highlighter-rouge">Settings-&gt;Actions secrets and variables</code> 的 <code class="language-plaintext highlighter-rouge">Secrets</code> 中， 并将这个 <em>secret</em> 命名为 <code class="language-plaintext highlighter-rouge">DEPLOY_KEY</code>。 之后需要将公有密钥添加到 Github 账号的 <code class="language-plaintext highlighter-rouge">Settings-&gt;SSH and GPG keys</code> 中。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># This workflow uses actions that are not certified by GitHub.</span>
<span class="c1"># They are provided by a third-party and are governed by</span>
<span class="c1"># separate terms of service, privacy policy, and support</span>
<span class="c1"># documentation.</span>

<span class="c1"># Sample workflow for building and deploying a Jekyll site to GitHub Pages</span>
<span class="na">name</span><span class="pi">:</span> <span class="s">Deploy Jekyll site to Pages</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="c1"># Runs on pushes targeting the default branch</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">YOUR_PRIVATE_REPO_SOURCE_BRANCH"</span><span class="pi">]</span>

  <span class="c1"># Allows you to run this workflow manually from the Actions tab</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>

<span class="c1"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages</span>
<span class="na">permissions</span><span class="pi">:</span>
  <span class="na">contents</span><span class="pi">:</span> <span class="s">read</span>
  <span class="na">pages</span><span class="pi">:</span> <span class="s">write</span>
  <span class="na">id-token</span><span class="pi">:</span> <span class="s">write</span>

<span class="c1"># Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.</span>
<span class="c1"># However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.</span>
<span class="na">concurrency</span><span class="pi">:</span>
  <span class="na">group</span><span class="pi">:</span> <span class="s2">"</span><span class="s">pages"</span>
  <span class="na">cancel-in-progress</span><span class="pi">:</span> <span class="kc">false</span>

<span class="na">env</span><span class="pi">:</span>
  <span class="na">TZ</span><span class="pi">:</span> <span class="s">Asia/Shanghai</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="c1"># Build job</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>
        <span class="na">with</span><span class="pi">:</span>
           <span class="na">persist-credentials</span><span class="pi">:</span> <span class="kc">true</span> <span class="c1"># false 是用 personal token，true 是使用 GitHub token</span>
           <span class="na">fetch-depth</span><span class="pi">:</span> <span class="m">0</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup Ruby</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf</span> <span class="c1"># v1.146.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">ruby-version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.1'</span> <span class="c1"># Not needed with a .ruby-version file</span>
          <span class="na">bundler-cache</span><span class="pi">:</span> <span class="kc">true</span> <span class="c1"># runs 'bundle install' and caches installed gems automatically</span>
          <span class="na">cache-version</span><span class="pi">:</span> <span class="m">0</span> <span class="c1"># Increment this number if you need to re-download cached gems</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build with Jekyll</span>
        <span class="c1"># Outputs to the './_site' directory by default</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">bundle exec jekyll build --baseurl "$" --config ./_config.yml</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="na">JEKYLL_ENV</span><span class="pi">:</span> <span class="s">production</span>
          <span class="na">TZ</span><span class="pi">:</span> <span class="s">Asia/Shanghai</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Upload artifact</span>
        <span class="c1"># Automatically uploads an artifact from the './_site' directory by default</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/upload-pages-artifact@v1</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set SSH Environment</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="c1"># 1. Add this private key and title as DEPLOY_KEY in this repo -&gt; settings/secrets</span>
          <span class="c1"># 2. Add corresponding public key and named as any text to the github page repo -&gt; settings/deploy keys</span>
          <span class="na">DEPLOY_KEY</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">USER_NAME</span><span class="pi">:</span> <span class="s">YOUR_USER_NAME</span>
          <span class="na">USER_EMAIL</span><span class="pi">:</span> <span class="s">YOUR_USER_EMAIL</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">mkdir -p ~/.ssh/</span>
          <span class="s">echo "$DEPLOY_KEY" | tr -d '\r' &gt; ~/.ssh/id_rsa</span>
          <span class="s">chmod 600 ~/.ssh/id_rsa</span>
          <span class="s">chmod 700 ~/.ssh &amp;&amp; chmod 600 ~/.ssh/*</span>
          <span class="s">ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span>
          <span class="s">git config --global user.name $USER_NAME</span>
          <span class="s">git config --global user.email $USER_EMAIL</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Commit and Push to Git Pages</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="na">USER_NAME</span><span class="pi">:</span> <span class="s">YOUR_USER_NAME</span>
          <span class="na">USER_EMAIL</span><span class="pi">:</span> <span class="s">YOUR_USER_EMAIL</span>
        <span class="na">working-directory</span><span class="pi">:</span> <span class="s">./</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span> 
          <span class="s">git clone -b PUBLIC_REPOSITORY_BRANCH git@github.com:YOUR_USER_NAME/YOUR_USER_NAME.github.io.git gitpage_repo</span>
          <span class="s">cd gitpage_repo</span>
          <span class="s">cp robots.txt ../_site/robots.txt</span>
          <span class="s">rm -rf *</span>
          <span class="s">cp -r ../_site/* .</span>
          <span class="s">git add -A</span>
          <span class="s">git -c user.name="$USER_NAME" -c user.email="$USER_EMAIL" commit -am "Site Updated: `date +'%Y-%m-%d %H:%M:%S'`" </span>
          <span class="s">git push origin master -f -q</span>
</code></pre></div></div>

<p>简化了个人摸索这个自动化配置的过程， 若对以上配置有所疑惑之处， 可以参考以下文章加深个人理解。 如有问题欢迎留言询问~</p>

<blockquote>
  <p><a href="https://juejin.cn/post/7120474763910676488">GitHub 私有仓库免费开启 GitHub Pages 的可行性方案</a><br />
<a href="https://babybluue.github.io/posts/89195a6e">通过Github Action自动部署Hexo</a><br />
<a href="https://gist.github.com/Half9000/7d83d7f8dea012926dc7d2203a1f169e">Hexo Deploy with Github Actions workflow</a><br />
<a href="https://printempw.github.io/use-github-actions-to-deploy-hexo-blog/">使用 GitHub Actions 自动部署 Hexo 博客</a><br />
<a href="https://blog.csdn.net/shiwanghualuo/article/details/128514693">github actions中如何判断仓库是否有变更</a></p>
</blockquote>

<h2 id="3-爬虫与目录结构保护">3. 爬虫与目录结构保护</h2>

<p>更改网站的 <code class="language-plaintext highlighter-rouge">robots.txt</code> 为如下形式</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="kc">null</span>
<span class="nn">---</span>

<span class="na">User-agent</span><span class="pi">:</span> <span class="err">*</span>

<span class="na">Disallow</span><span class="pi">:</span> <span class="s">/assets/</span>   <span class="c1"># /assets/ 是常规资源目录，不怕暴露路径</span>
<span class="na">Disallow</span><span class="pi">:</span> <span class="s">/norobots/</span> <span class="c1"># 零碎敏感文件、目录等放置在此</span>

<span class="na">Sitemap</span><span class="pi">:</span> <span class="s">https://hangx-ma.github.io/sitemap.xml</span>

</code></pre></div></div>

<p>出于安全考虑，站点的某些目录结构，譬如 <code class="language-plaintext highlighter-rouge">/norobots/</code>， 不希望被外部访问， 所以需要使用重定向来保护目录， 可以使用 GitHub 推荐的 Jekyll 重定向插件 <a href="https://github.com/jekyll/jekyll-redirect-from">Jekyll Redirect From</a>。</p>

<p>GitHub Pages 默认支持该插件，在项目的 <code class="language-plaintext highlighter-rouge">Gemfile</code> 里添加引用：</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem "jekyll-redirect-from"
</code></pre></div></div>

<p>接着运行 <code class="language-plaintext highlighter-rouge">bundle install</code> 命令安装插件，安装完成后，在站点 404 页面的 YAML 头部添加跳转规则：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">redirect_from</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">/norobots/</span>
<span class="nn">---</span>
</code></pre></div></div>

<p>具体的目录可以更具自己站点的实际情况定义， 按照上述定义， <code class="language-plaintext highlighter-rouge">访问 {SITE_URL}/norobots/</code> 会直接返回 404 页面， 从而保护了敏感目录。</p>

<blockquote>
  <p><a href="https://cotes.page/posts/the-seo-to-jekyll/">Jekyll 的 SEO 优化</a></p>
</blockquote>]]></content><author><name>HangX-Ma</name></author><category term="Tool" /><category term="Git" /><summary type="html"><![CDATA[通过私有化 Git Pages 源码仓库， 并自动化推送和部署公有 Git Pages 仓库以实现源数据保护。]]></summary></entry><entry><title type="html">关于 Jekyll TeXt 博客搭建</title><link href="https://hangx-ma.github.io/2023/05/18/Jekyll-TeXt-config.html" rel="alternate" type="text/html" title="关于 Jekyll TeXt 博客搭建" /><published>2023-05-18T00:00:00+08:00</published><updated>2023-05-18T00:00:00+08:00</updated><id>https://hangx-ma.github.io/2023/05/18/Jekyll-TeXt-config</id><content type="html" xml:base="https://hangx-ma.github.io/2023/05/18/Jekyll-TeXt-config.html"><![CDATA[<p>之前用 Hexo 搭 Git Pages 的经历实在是惨痛， 个人对前端没什么研究配置非常痛苦， 尤其是还需要装大量的依赖库尝试解决 <strong>图片显示</strong>、 <strong>Markdown显示</strong>， <strong>数学公式显示</strong> 等问题， Node.js 也非常不省心， 库版本冲突也很严重。 咬咬牙用了一段时间博客园， 不简洁， 不优雅， 不顺我心。 偶然间在知乎上看到了一些关于 Hugo， Jekyll， Hexo 相关的比较， Jekyll 虽然用 Ruby 构建速度稍慢 （实际感觉还挺快）， 但关键是 Github 的支持非常友好， 能自动编译并部署网站， 而且相关的社区建设也很不错， 对于只想专注记录并做点代码微调的人而言显得非常良心。 偶然间发现了 <code class="language-plaintext highlighter-rouge">TeXt</code> 这款主题， 文档很新而且很全面， 样式也吸引人， 就此入坑了。 前后花了两天去踩坑配自己心仪的样式， 在此记录一些配置细节， 不定期更新。</p>

<p class="info"><code class="language-plaintext highlighter-rouge">_data/variables.yml</code> 中的配置对 <code class="language-plaintext highlighter-rouge">_config.yml</code> 会进行覆写有更高的优先级。</p>

<h2 id="logo">logo</h2>

<p>给自己的网站增加一个独一无二的 logo 是很多人第一件要做的事， 但这个 logo 尺寸也是有要求的， 例如 Bing 网页抓取的页面不能超过 125 KB。 因而 <code class="language-plaintext highlighter-rouge">logo.svg</code> 尺寸尽可能要小， 否则会导致页面尺寸过大出现网页抓取的 SEO 问题。</p>

<h2 id="bootcdn">bootcdn</h2>

<p>BootCDN 域名已经迁移到 <code class="language-plaintext highlighter-rouge">https://cdn.bootcdn.net/</code>， 以 <code class="language-plaintext highlighter-rouge">https://cdn.bootcss.com/</code> 开头的链接已经全部不可用， 需要在新的 BootCDN 往网站中找到相应的 js 文件进行更新。 需要在 <code class="language-plaintext highlighter-rouge">_data/variables.yml</code> 更新这些链接并适当更新版本， 老旧版本可能会造成一些问题。</p>

<p class="warning">需要注意的是， <code class="language-plaintext highlighter-rouge">mathjax</code> 需要更换为 <code class="language-plaintext highlighter-rouge">https://unpkg.com/</code> 源， BootCDN 源出现 <code class="language-plaintext highlighter-rouge">Uncaught ReferenceError: MathJax is not defined</code>。</p>

<h2 id="leancloud">leancloud</h2>

<p>使用 leancloud 国际版需要更新 <code class="language-plaintext highlighter-rouge">_includes/pageview-providers/leancloud.js</code> 的 <code class="language-plaintext highlighter-rouge">serverURLs</code> 为如下形式。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">serverURLs</span><span class="pi">:</span> <span class="s">https://xxxxxxxx.api.lncldglobal.com</span> <span class="c1"># 把xxxxxxxx替换成你自己AppID的前8位字符</span>
</code></pre></div></div>

<blockquote>
  <p>这个问题是在 valine 的 issue 版面找到的 <a href="https://github.com/xCss/Valine/issues/340">国际版域名问题 #340</a>。</p>
</blockquote>

<h2 id="pageview">pageview</h2>

<h3 id="1-自动生成文章标识-key">1. 自动生成文章标识 <em>key</em></h3>

<p>按照文档配置好 leancloud 之后发现文章的 views 一直都没有变化， 后检查文档说明发现需要给每篇文章增加一个 <em>unique key</em> 才能进行阅读量的统计。 找到 <code class="language-plaintext highlighter-rouge">_includes/pageview-providers/leancloud/post.html</code> 发现几个 <code class="language-plaintext highlighter-rouge">page.key</code> 的变量， 以及 <code class="language-plaintext highlighter-rouge">_includes/article-info.html</code> 中有这么一句代码给 <code class="language-plaintext highlighter-rouge">data-page-key</code> 进行了赋值。 <code class="language-plaintext highlighter-rouge">data-page-key</code> 是 <code class="language-plaintext highlighter-rouge">post.html</code> 用以判断是否对 pageview 进行增加的依据。</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;li&gt;&lt;i</span> <span class="na">class=</span><span class="s">"far fa-eye"</span><span class="nt">&gt;&lt;/i&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"js-pageview"</span> <span class="na">data-page-key=</span><span class="s">"{{ include.article.key }}"</span><span class="nt">&gt;</span>0<span class="nt">&lt;/span&gt;</span> {{ _locale_views }}<span class="nt">&lt;/li&gt;</span>
</code></pre></div></div>

<p>对于 Jekyll 而言， <code class="language-plaintext highlighter-rouge">page.id</code> 以及 <code class="language-plaintext highlighter-rouge">page.url</code> 都是内置的变量， 且对于一个网页而言， 这两个值都可以作为唯一标识， 其作用与 <em>unique key</em> 的作用别无二致。 那么可以选择其中一个对原有的 <code class="language-plaintext highlighter-rouge">page.key</code> 进行替代。 但是， <code class="language-plaintext highlighter-rouge">page.id</code> 当时产生了一个问题， 虽然文章中的 views 部分会增加了， 但文章列表中仍然显示为 0， 我怀疑当时将 <code class="language-plaintext highlighter-rouge">data-page-key</code> 直接改为 <code class="language-plaintext highlighter-rouge">page.id</code>， 并且没有对 <code class="language-plaintext highlighter-rouge">/</code> 进行处理有关系。 实际的更改如下所示：</p>

<ul>
  <li>
    <p>post.html</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  { page.key } -&gt;  { page.url }
  {{ page.key }} -&gt; {{ page.url | replace:'/', 's' }}
</code></pre></div>    </div>
  </li>
  <li>
    <p>article.html</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  {{ include.article.key }} -&gt; {{ include.article.url | replace: '/', 's' }}
</code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p>该部分有两条在 TeXt theme 的 <em>issues</em> 均有提及</p>

  <ul>
    <li>原文链接 <a href="https://github.com/Real-king-Ph/Real-king-Ph.GitHub.io/blob/master/_posts/2022-04-06M/2022-04-05-TeXt%E4%B8%BB%E9%A2%98%E4%B8%8B-key%E7%9A%84%E9%87%8D%E8%AE%BE-leancloud%E8%BD%AC%E5%9B%BD%E9%99%85%E7%89%88.md">Key 的重设</a></li>
    <li><a href="https://github.com/kitian616/jekyll-TeXt-theme/issues/321">Feature request: support post.id for comments</a></li>
  </ul>
</blockquote>

<h3 id="2-home-界面的多余的-views">2. Home 界面的多余的 views</h3>

<p>开启 pageview 之后在 Home/Archive/About 界面的右上角也能看到 views 这个字样， 感觉非常多余， 其实只需要在上述的那句 <code class="language-plaintext highlighter-rouge">data-page-key</code> 的代码前加一些判断， 让这个字样在 Home/Archive/About 界面不显示即可。 对于 Archive 以及 About 两个界面， 需要判断 <code class="language-plaintext highlighter-rouge">page.url != '/archive.html'</code> 以及 <code class="language-plaintext highlighter-rouge">page.url != '/about.html'</code>， 但对于 Home 界面就有些麻烦， 这些 views 在 Home 界面是全关联的， 如果右上角的 views 消失了， 后面的 article list 中的也会跟着消失， 所以需要区分 Home 界面本身的 article 和我们的在 <code class="language-plaintext highlighter-rouge">_posts</code> 文件夹下的 article。</p>

<p>发现 <code class="language-plaintext highlighter-rouge">home.html</code> 实际也是一种特殊的 post， 只是它的 title 被认为设置隐藏了。 所以， 只需要给这篇特殊的文章设定 <code class="language-plaintext highlighter-rouge">pageview: false</code> 就能让它的 pageview 字样消失而不影响 Home 界面其他文章的 pageview 字样的显示。</p>

<blockquote>
  <p>后来想想对于 Archive 和 About 这两个界面而言也是同样的道理， 都应该能用 <code class="language-plaintext highlighter-rouge">pageview: false</code> 将 pageview 字样去除。 实践证明确实可行！</p>
</blockquote>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--  article-info.html --&gt;</span>
{%- if page.layout != "404" -%}
    {%- if page.url != '/about.html' and page.url != '/archive.html' -%}
        <span class="nt">&lt;li&gt;&lt;i</span> <span class="na">class=</span><span class="s">"far fa-eye"</span><span class="nt">&gt;&lt;/i&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"js-pageview"</span> <span class="na">data-page-key=</span><span class="s">"{{ include.article.url | replace: '/', 's' }}"</span><span class="nt">&gt;</span>0<span class="nt">&lt;/span&gt;</span> {{ _locale_views }}<span class="nt">&lt;/li&gt;</span>
    {%- endif -%}
{%- else -%}
    <span class="nt">&lt;li&gt;&lt;i</span> <span class="na">class=</span><span class="s">"far fa-eye"</span><span class="nt">&gt;&lt;/i&gt;</span> 404 {{ _locale_views }}<span class="nt">&lt;/li&gt;</span>
{%- endif -%}
</code></pre></div></div>

<h2 id="gitalk">gitalk</h2>

<p>从博客园换成 Git Pages 的另外一个原因是评论系统的便利性， Github 账号登陆省去了评论需要重新创建账号的麻烦。 尝试过使用 valine 作为评论系统， 虽然可以和 leancloud 公用 key， 但界面有些复杂不简洁不如 gitalk 赏心悦目。</p>

<p class="info">gitalk 在 2023-05 时的最新版本是 1.7.2， 使用前记得在 <code class="language-plaintext highlighter-rouge">_include/variable.yml</code> 中更新 bootcdn 地址。</p>

<h3 id="1-让-gitalk-摆脱-pagekey">1. 让 gitalk 摆脱 page.key</h3>

<p>这里就不能直接改成把 <code class="language-plaintext highlighter-rouge">_includes/comments-providers/gitalk.html</code> 中的 <code class="language-plaintext highlighter-rouge">page.key</code> 直接改成 <code class="language-plaintext highlighter-rouge">page.url</code>， 不然在 Home 和 About 这两个界面也会出现评论框， 我改成了 <code class="language-plaintext highlighter-rouge">page.id</code> 就神奇的解决了问题。</p>

<p>另外在 issue 版面我看到一条 <a href="https://github.com/mzlogin/mzlogin.github.io/issues/63">发布的新文章提示“未找到相关的 Issues 进行评论，请联系xxx初始化创建” #63</a> 的问题， 如果自己是管理员的话登陆一下就能自动创建评论区解决问题。 关键的是这一句， 文章链接过长 （超过 50 个字符） 也会导致创建失败出现 <code class="language-plaintext highlighter-rouge">Error: Validation Failed.</code>， 按照 <a href="https://github.com/mzlogin/mzlogin.github.io/commit/5ef353c011b21c04193df19096bc67a7b7140bec">Prevent comments initialize issue</a> 中的记录， 只需要将 <code class="language-plaintext highlighter-rouge">page.id</code> 改为 <code class="language-plaintext highlighter-rouge">page.id | truncate: 50, ''</code> 即可解决问题。</p>

<h3 id="2-error-request-failed-with-status-code-403">2. Error: Request failed with status code 403</h3>

<p>这个问题就是 gitalk 被墙了， 加一个 <code class="language-plaintext highlighter-rouge">proxy</code> 在 <code class="language-plaintext highlighter-rouge">_config.yml</code> 就行， 但也要记得同步更新 <code class="language-plaintext highlighter-rouge">gitalk.html</code> 中的配置。 <code class="language-plaintext highlighter-rouge">proxy</code> 的值如何获取我找到了 <a href="https://prohibitorum.top/7cc2c97a15b4.html">解决 Gitalk 无法获取 Github Token 问题</a> 文章， <a href="https://github.com/Dedicatus546/cors-server">fork</a> 这个作者的仓库然后按照他文中给的步骤注册 netlify账号并编译部署 <code class="language-plaintext highlighter-rouge">cors-server</code> 仓库， 它会生成一个 <a href="https://xxxx.netlify.app">https://xxxx.netlify.app</a> 的 site 地址， 如果在网页中输入 <a href="https://xxxx.netlify.app/github_access_token">https://xxxx.netlify.app/github_access_token</a> 会出现 <code class="language-plaintext highlighter-rouge">a cors proxy by netlify!</code> 那就是成功了。 <code class="language-plaintext highlighter-rouge">proxy</code> 部分用这个地址即可。 懒的话直接拿这个作者已经建好的 <em>github_access_token</em> 也是可以的。</p>

<blockquote>
  <p><strong>vercel</strong>: <a href="https://vercel.prohibitorum.top/github_access_token">https://vercel.prohibitorum.top/github_access_token</a><br />
<strong>netlify</strong>: <a href="https://strong-caramel-969805.netlify.app/github_access_token">https://strong-caramel-969805.netlify.app/github_access_token</a></p>
</blockquote>

<h3 id="3-error-uconcatjoin-is-not-a-function">3. Error: u.concat(…).join is not a function</h3>

<p>在 gitalk repository 的 issue 界面就可以找到这条问题的处理办法， <a href="https://github.com/gitalk/gitalk/issues/114">Error: u.concat(…).join is not a function! #114</a> 在 <code class="language-plaintext highlighter-rouge">_config.yml</code> 配置界面给 gitalk 加上如下代码。</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">gitalk</span><span class="pi">:</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">gitalk</span>
</code></pre></div></div>

<p>另外在 <code class="language-plaintext highlighter-rouge">_includes/comments-providers/gitalk.html</code> 中进行修改。</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const gitalk = new Gitalk({
    // ...
    labels: '{{ theme.gitalk.labels }}'.split(',').filter(l =&gt; l),
    //...
});
gitalk.render('gitalk-container');
</code></pre></div></div>

<h2 id="site-exposure">site exposure</h2>

<p>注册 google analytics 并且配置好 <code class="language-plaintext highlighter-rouge">_config.yml</code> 文件中的 <code class="language-plaintext highlighter-rouge">analytics</code> 部分的信息， 会发现 <a href="https://analytics.google.com/">google analytics</a> 好像并没有开始工作。 实际上是 google 并没有将网站纳入搜索索引中， 在 google 搜索中输入 <code class="language-plaintext highlighter-rouge">site:YOUR_GIT_PAGES_ADDRESS</code> 会发现没有任何内容。 要么等着 google 的搜索引擎来抓网页， 要么就自己主动先进行配置申请。</p>

<blockquote>
  <p><a href="https://evanli.github.io/blog/2018/10/25/let-jekyll-github-pages-be-searched-by-google/">让Google搜索到用Jekyll搭建在Github Pages上的博客</a><br />
<a href="https://blog.naibabiji.com/tutorial/google-analytics.html">自己建网站怎么添加Google Analytics统计代码查看每日流量</a></p>
</blockquote>

<h3 id="1-sitemap">1. sitemap</h3>

<p>站点地图(Site Map)是用来注明网站结构的文件，我们希望搜索引擎的爬虫了解我们的网站结构,以便于高效爬取内容，快速建立索引。 使用 <a href="https://www.xml-sitemaps.com/">XML-Sitemaps</a> 生成我们的 Git Pages 的 sitemap.xml 文件， 然后将其放在自己网站文件的根目录。 之后就需要在对应的 Google Search Console 中增加 sitemap URL 进行验证。 <code class="language-plaintext highlighter-rouge">sitemap.xml</code> 需要在我们增添新的博文或内容后手动进行更新， 以使得搜索引擎能够获取网站的最新内容。 或者通过 jekyll-sitemap 插件自动生成更新。</p>

<h3 id="2-google-search-console">2. Google Search Console</h3>

<p>资源类型选择 “网站前缀”， 提交我们的 <code class="language-plaintext highlighter-rouge">sitemap.xml</code> 并对需要的网址进行网站检查， 然后申请编入索引。</p>

<h3 id="3-bing-webmasters">3. Bing Webmasters</h3>

<p>如果想要在 Bing 中增加自己的网站索引也是类似的操作， 只是我们需要用到 <a href="https://www.bing.com/webmasters/">Bing Webmaster Tools</a>。 如果用 Google Search Console 顺利的话， 可以用同一个 Google 账号导入相关的信息， 但 <code class="language-plaintext highlighter-rouge">sitemap.xml</code> 验证好像还是需要自己添加。</p>

<h3 id="4-url-上传搜索引擎索引">4. URL 上传搜索引擎索引</h3>

<p>这篇 <a href="https://www.cnblogs.com/duanguyuan/p/16205184.html">文章</a> 介绍了如何通过 API 接口提交 URL 申请， 以加快文章列表被搜索引擎的收录。</p>

<ul>
  <li>
    <p>生成 URL 列表手动递交</p>

    <p>在提交 URL 之前需要准备好 URL 列表， 形如</p>

    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  http://www.your-site.com/1.html
  http://www.your-site.com/2.html
</code></pre></div>    </div>

    <p>我们可以手动通过 <a href="https://www.xml-sitemaps.com/">XML-Sitemaps</a> 网站生成 sitemap， 或者通过 Github 支持的 <code class="language-plaintext highlighter-rouge">jekyll-sitemap</code> 插件在部署后自动生成， 这个插件可以在 <code class="language-plaintext highlighter-rouge">_config.yml</code> 中看到是已经被添加了的。 那么之后就可以用以下 Linux 命令提取 <code class="language-plaintext highlighter-rouge">sitemap.xml</code> 文件中的 URL， 筛选我们最新添加的部分。</p>

    <blockquote>
      <p>可以使用诸如 compareit 这类插件进行更高效的对比筛选</p>
    </blockquote>
  </li>
  <li>
    <p>API 推送递交</p>

    <p>Bing 以及 Baidu 都提供了 API 接口进行提交。 根据 <a href="https://www.bing.com/webmasters/">Bing Webmasters</a> 以及 <a href="https://ziyuan.baidu.com/linksubmit/">Baidu linksubmit</a> 提供的 API 结构， 可以更改如下 <code class="language-plaintext highlighter-rouge">commit_urls.py</code> 的相应信息， 使用 <code class="language-plaintext highlighter-rouge">python commit_urls.py</code> 提交网站， 该办法是通过 Git Log 获取最新一条更改信息， 并将其中与 URL 对应部分进行裁剪组合获取所需的 URLs。</p>

    <details>
      <summary> <code class="language-plaintext highlighter-rouge">commit_urls.py</code> <i class="fas fa-file-code" style="color: #ff4040;"></i></summary>

      <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">import</span> <span class="n">os</span>
  <span class="kn">import</span> <span class="n">subprocess</span>
  <span class="kn">import</span> <span class="n">requests</span>
  <span class="kn">import</span> <span class="n">json</span>

  <span class="k">def</span> <span class="nf">commit_urls</span><span class="p">():</span>
      <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Submit newest URLs to Baidu and Bing</span><span class="sh">"</span><span class="p">)</span>
      <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="sh">"</span><span class="s">git checkout master</span><span class="sh">"</span><span class="p">)</span>
      <span class="n">urls</span> <span class="o">=</span> <span class="p">[]</span>

      <span class="c1"># 生成url列表
</span>      <span class="n">ret</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span>
          <span class="sh">"</span><span class="s">git rev-parse --short HEAD</span><span class="sh">"</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span>
      <span class="p">)</span>
      <span class="k">if</span> <span class="n">ret</span><span class="p">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
          <span class="n">commit_id</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">ret</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="sh">"</span><span class="s">utf_8</span><span class="sh">"</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
          <span class="n">ret</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span>
              <span class="sh">"</span><span class="s">git show --pretty=</span><span class="sh">"</span> <span class="sh">"</span><span class="s"> --name-only </span><span class="sh">"</span> <span class="o">+</span> <span class="n">commit_id</span><span class="p">,</span>
              <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
              <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
          <span class="p">)</span>
          <span class="k">if</span> <span class="n">ret</span><span class="p">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
              <span class="n">changes</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">ret</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
              <span class="k">for</span> <span class="n">change</span> <span class="ow">in</span> <span class="n">changes</span><span class="p">:</span>
                  <span class="sh">'''</span><span class="s"> 使用 Jekyll 主题直接上传源码至 Git Pages 版本
                  # change[7:] 去掉最前面的 _post/
                  change = change[7:]
                  post_name = change.split(</span><span class="sh">"</span><span class="s">-</span><span class="sh">"</span><span class="s">)
                  if len(post_name) &gt; 3:
                      year = str(post_name.__getitem__(0))
                      month = str(post_name.__getitem__(1))
                      day = str(post_name.__getitem__(2))
                      if len(year) == 4 and int(year) &gt;= 2023:
                          if len(month) == 2 and int(month) &gt;= 1 and int(month) &lt;= 12:
                              if len(day) == 2 and int(day) &gt;= 1 and int(day) &lt;= 31:
                                  if change.endswith(</span><span class="sh">"</span><span class="s">.md</span><span class="sh">"</span><span class="s">):
                                      # change[:-3] 是为了去掉末尾的 .md
                                      prefix = year + </span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="s"> + month + </span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="s"> + day + </span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="s">
                                      article_path = prefix + change[len(prefix):-3]
                                      urls.append(</span><span class="sh">"</span><span class="s">https://your-site.com/{}</span><span class="sh">"</span><span class="s">.format(article_path))
                  </span><span class="sh">'''</span>
                  <span class="c1"># 文章为 .html 结尾的编译后的静态网站， 自行更改相关配置
</span>                  <span class="k">if</span> <span class="n">change</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">.html</span><span class="sh">"</span><span class="p">):</span>
                      <span class="c1"># change[:-5] 是为了去掉末尾的 .html
</span>                      <span class="n">urls</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">https://your-site.com/{}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">change</span><span class="p">[:</span><span class="o">-</span><span class="mi">5</span><span class="p">]))</span>
          <span class="k">else</span><span class="p">:</span>
              <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">subprocess run error:{}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">ret</span><span class="p">.</span><span class="n">stderr</span><span class="p">))</span>
      <span class="k">else</span><span class="p">:</span>
          <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">subprocess run error:{}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">ret</span><span class="p">.</span><span class="n">stderr</span><span class="p">))</span>

      <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Current submitted URLs:</span><span class="sh">"</span><span class="p">,</span> <span class="n">urls</span><span class="p">)</span>

      <span class="c1"># 提交到 Bing
</span>      <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
          <span class="sh">"</span><span class="s">Content-Type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">application/json; charset=utf-8</span><span class="sh">"</span><span class="p">,</span>
          <span class="sh">"</span><span class="s">Host</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">ssl.bing.com</span><span class="sh">"</span><span class="p">,</span>
      <span class="p">}</span>
      <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">siteUrl</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">https://your-site.com</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">urlList</span><span class="sh">"</span><span class="p">:</span> <span class="n">urls</span><span class="p">}</span>
      <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span>
          <span class="n">url</span><span class="o">=</span><span class="sh">"</span><span class="s">https://www.bing.com/webmaster/api.svc/json/SubmitUrlbatch?apikey=your-apikey</span><span class="sh">"</span><span class="p">,</span>
          <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span>
          <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
      <span class="p">)</span>
      <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Bing</span><span class="sh">'</span><span class="s">s response: </span><span class="sh">"</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>

      <span class="c1"># 提交到百度
</span>      <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
          <span class="sh">"</span><span class="s">User-Agent</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">curl/7.12.1</span><span class="sh">"</span><span class="p">,</span>
          <span class="sh">"</span><span class="s">Host</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">data.zz.baidu.com</span><span class="sh">"</span><span class="p">,</span>
          <span class="sh">"</span><span class="s">Content-Type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">text/plain</span><span class="sh">"</span>
      <span class="p">}</span>
      <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span>
          <span class="n">url</span><span class="o">=</span><span class="sh">"</span><span class="s">http://data.zz.baidu.com/urls?site=your-site.com&amp;token=your-token</span><span class="sh">"</span><span class="p">,</span>
          <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span>
          <span class="n">data</span><span class="o">=</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span>
      <span class="p">)</span>
      <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Baidu</span><span class="sh">'</span><span class="s">s response: </span><span class="sh">"</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
</code></pre></div>      </div>

    </details>

    <p>如果成功则会有类似如下的打印</p>

    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Submit newest URLs to Baidu and Bing
  Switched to branch 'master'
  Your branch is up to date with 'origin/master'.
  Current submitted URLs: ['https://hangx-ma.github.io/2023/05/18/Jekyll-TeXt-config']
  Bing's response:  b'{"d":null}'
  Baidu's response:  b'{"remain":99,"success":1}'
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="copyright">Copyright</h2>

<p>复制博客内容的时候增加版权信息感觉也是挺有用的， 需要确认版权声明的位置， 对于文章而言， 主题内容肯定在 <code class="language-plaintext highlighter-rouge">content</code> 中。 F12 使用开发者工具可以确定 TeXt 主题的文章主题内容是在 <code class="language-plaintext highlighter-rouge">&lt;div class="page__content"&gt;</code> 中。 我在 <code class="language-plaintext highlighter-rouge">_includes/custom</code> 中创建了一个 <code class="language-plaintext highlighter-rouge">copyright.js</code> 监听版权声明， 之后只需要在 <code class="language-plaintext highlighter-rouge">_layouts/page.html</code> 中引用该 js 文件即可。 当然为了灵活处理， 可以在 <code class="language-plaintext highlighter-rouge">_config.yml</code> 增加 copyright 的开关并在引用时加入条件语句。</p>

<details>
  <summary> <code class="language-plaintext highlighter-rouge">copyright.js</code> <i class="fas fa-file-code" style="color: #ff4040;"></i></summary>

  <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">setClipboardText</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
    <span class="c1">// clipboardData 对象是为通过编辑菜单、快捷菜单和快捷键执行的编辑操作所保留的，也就是你复制或者剪切内容</span>
    <span class="kd">let</span> <span class="nx">clipboardData</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">clipboardData</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">clipboardData</span><span class="p">;</span>
    <span class="c1">// 如果未复制或者未剪切，则return出去</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">clipboardData</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>
    <span class="nx">event</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span>
    <span class="c1">// Selection 对象，表示用户选择的文本范围或光标的当前位置。</span>
    <span class="c1">//     声明一个变量接收 -- 用户输入的剪切或者复制的文本转化为字符串</span>
    <span class="kd">let</span> <span class="nx">text</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nf">getSelection</span><span class="p">().</span><span class="nf">toString</span><span class="p">();</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 如果文本存在则先取消文本默认事件</span>
        <span class="nx">event</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span>
        <span class="c1">// 通过调用常clipboardData对象的 setData(format, data) 方法；来设置相关文本</span>
        <span class="c1">// format: 一个DOMString 表示要添加到 drag object的拖动数据的类型。</span>
        <span class="c1">// data: 一个 DOMString表示要添加到 drag object的数据。</span>
        <span class="kd">var</span> <span class="nx">copyright</span> <span class="o">=</span> <span class="dl">'</span><span class="se">\n\n</span><span class="dl">'</span>
        <span class="o">+</span> <span class="dl">'</span><span class="se">\n</span><span class="s1">Author: HangX-Ma(一只豆腐)</span><span class="dl">'</span>
        <span class="o">+</span> <span class="dl">'</span><span class="se">\n</span><span class="s1">Email: m-contour@qq.com</span><span class="dl">'</span>
        <span class="o">+</span> <span class="dl">'</span><span class="se">\n</span><span class="s1">Article Address: </span><span class="dl">'</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span>
        <span class="o">+</span> <span class="dl">'</span><span class="se">\n</span><span class="s1">Copyright Notice: </span><span class="dl">'</span>
        <span class="o">+</span> <span class="dl">'</span><span class="s1">The copyright belongs to the author. </span><span class="dl">'</span>
        <span class="o">+</span> <span class="dl">'</span><span class="s1">For commercial reproduction, please contact the author for authorization. </span><span class="dl">'</span>
        <span class="o">+</span> <span class="dl">'</span><span class="s1">For non-commercial reproduction, please indicate the source.</span><span class="dl">'</span>

        <span class="nx">clipboardData</span><span class="p">.</span><span class="nf">setData</span><span class="p">(</span><span class="dl">'</span><span class="s1">text/plain</span><span class="dl">'</span><span class="p">,</span> <span class="nx">text</span> <span class="o">+</span> <span class="nx">copyright</span><span class="p">);</span>

    <span class="p">}</span>
<span class="p">};</span>
<span class="kd">var</span> <span class="nx">contents</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementsByClassName</span><span class="p">(</span><span class="dl">"</span><span class="s2">page__content</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// 监听文章内容的copy事件</span>
<span class="nx">contents</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">copy</span><span class="dl">'</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
    <span class="nf">setClipboardText</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>  </div>

</details>

<ul>
  <li>
    <p>通过 F12 开发者工具查阅自己的网站主题内容所属位置。</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">&lt;!-- F12 查阅地址 --&gt;</span>
  <span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"root"</span> <span class="na">data-is-touch=</span><span class="s">"false"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"layout--page js-page-root"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"page__main js-page-main page__viewport cell cell--auto"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"page__main-inner"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"page__header d-print-none"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"page__content"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"page__header d-print-none"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
          <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>将 <code class="language-plaintext highlighter-rouge">copyright.js</code> 监听 javascript 文件在 head 中引用。</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">&lt;!-- _layouts/page.html 底部增添 copyright.js --&gt;</span>
  ...
  {%- if page.copyright -%}
  <span class="nt">&lt;script&gt;</span>
  <span class="p">{</span><span class="o">%-</span> <span class="nx">include</span> <span class="nx">custom</span><span class="o">/</span><span class="nx">copyright</span><span class="p">.</span><span class="nx">js</span> <span class="o">-%</span><span class="p">}</span>
  <span class="nt">&lt;/script&gt;</span>
  {%- endif -%}
</code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p><a href="https://blog.csdn.net/qq_33430083/article/details/105626840">新手如何给Hexo博客在复制时添加版权声明</a></p>
</blockquote>

<h2 id="markdown">markdown</h2>

<h3 id="1-代码块-liquid-代码误解析">1. 代码块 Liquid 代码误解析</h3>

<p>如果页面是通过Jekyll引擎进行渲染的, 那么在文章中写了 Liquid 代码, 引擎也会将其解析。 找了一圈发现最方便的是针对块内容进行特殊的解释。 这样在 <code class="language-plaintext highlighter-rouge">{% raw %}</code> 以及 <code class="language-plaintext highlighter-rouge">{% endraw %}</code> 之间的代码就不会被解析了， 但也需要注意空白符此时也会被作为 raw 的一部分显示在代码块中。</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% raw %}
{% this %}
{% endraw %}
</code></pre></div></div>

<p>作为替代，如果 Jekyll 的版本在 4.0 及以上，也可以在 post 顶部的 YAML 区域指定：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">render_with_liquid</span><span class="pi">:</span> <span class="kc">false</span>
<span class="nn">---</span>
</code></pre></div></div>

<blockquote>
  <p><a href="https://blog.csdn.net/qq_41437512/article/details/123031890">设置Markdown中展示Liquid(Jekyll)但不解析的方式</a><br />
<a href="https://cotes.page/posts/jekyll-code-snippet/">Jekyll 代码块展示</a></p>
</blockquote>

<h3 id="2-代码块折叠">2. 代码块折叠</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::options parse_block_html="true" /}

<span class="nt">&lt;details&gt;&lt;summary</span> <span class="na">markdown=</span><span class="s">"span"</span><span class="nt">&gt;</span> `commit_urls.py` <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"fas fa-file-code"</span> <span class="na">style=</span><span class="s">"color: #ff4040;"</span><span class="nt">&gt;&lt;/i&gt;&lt;/summary&gt;</span>

YOUR_CODE_HERE

<span class="nt">&lt;/details&gt;</span>

{::options parse_block_html="false" /}
</code></pre></div></div>

<blockquote>
  <p><a href="https://www.endtoend.ai/tutorial/collapsible-code-blocks/">Collapsible Code Blocks in GitHub Pages</a></p>
</blockquote>

<h2 id="个性化配置">个性化配置</h2>

<h3 id="1-back-to-top">1. Back To Top</h3>

<p>给网页增加返回顶部的功能能提供阅读的便利， 尝试过很多自己添加 js 代码的方式都没成功， 或者是中间没有过渡动画。 Github 上的一个开源的库倒是非常好用， 配置也很简单。 我在 <code class="language-plaintext highlighter-rouge">_layouts/base.html</code> 的 body 部分增加了配置代码， 毕竟所有的页面都是继承自 base， 这样这个 Back-To-Top 按钮就能全局可见了。</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- _layouts/base.html --&gt;</span>
<span class="nt">&lt;body&gt;</span>
    ...
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://unpkg.com/vanilla-back-to-top@7.2.1/dist/vanilla-back-to-top.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script&gt;</span><span class="nf">addBackToTop</span><span class="p">({</span>
        <span class="na">diameter</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
        <span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#FF4040</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">textColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#FFFFF0</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">})</span><span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<blockquote>
  <p><a href="https://github.com/vfeskov/vanilla-back-to-top">vfeskov/vanilla-back-to-top</a>: Simple and tiny Back To Top button with no dependencies.</p>
</blockquote>

<h3 id="2-隐藏-addtoany-悬浮按钮">2. 隐藏 AddToAny 悬浮按钮</h3>

<p>摸索了有一阵子， 发现 AddToAny 的按钮实际上是通过 <code class="language-plaintext highlighter-rouge">&lt;a class="a2a_button_copy_link"&gt;&lt;/a&gt;</code> 这样的语句添加的， 那我们只需要对这些语句段进行控制就能控制 AddToAny 的按钮的隐藏和显示了。 这对于手机阅读非常重要， 读者也不希望一个特占位置的分享按钮影响阅读体验， 把它缩小成一个小三角就很优雅了。</p>

<blockquote>
  <p>主要通过切换 <code class="language-plaintext highlighter-rouge">display: block</code> 和 <code class="language-plaintext highlighter-rouge">display: none</code> 两种状态完成显示和隐藏。</p>
</blockquote>

<h3 id="3-访客与阅读统计">3. 访客与阅读统计</h3>

<p>用 “不蒜子”， 非常简易！ 只需要在 <code class="language-plaintext highlighter-rouge">_includes/footer.html</code> 中加入如下代码， 就能获得和咱一样的显示效果了。</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"site-info mt-2"</span><span class="nt">&gt;</span>
      ...
      <span class="nt">&lt;div</span> <span class="na">align=</span><span class="s">"center"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;script </span><span class="na">async</span> <span class="na">src=</span><span class="s">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"busuanzi_container_site_pv"</span><span class="nt">&gt;</span>
            Total <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"busuanzi_value_site_pv"</span><span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">"fa fa-spinner fa-pulse"</span><span class="nt">&gt;&lt;/i&gt;&lt;/span&gt;</span> views,
        <span class="nt">&lt;/span&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"busuanzi_container_site_uv"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"busuanzi_value_site_uv"</span><span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">"fa fa-spinner fa-pulse"</span><span class="nt">&gt;&lt;/i&gt;&lt;/span&gt;</span> visitors.
        <span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<h3 id="4-个性化页签">4. 个性化页签</h3>

<p>个性化 Tab 标签。 相信很多人都看过 Tab 标签显示突然崩溃， 然后点回去又是好的。 我创建了 <code class="language-plaintext highlighter-rouge">_include/custom/funny-title.js</code> 文件， 并在 <code class="language-plaintext highlighter-rouge">_layouts/base.html</code> 中以 script 的形式引用了该文件。 这样我的网站的 Tab 也能跟读者开个小小的玩笑了 :stuck_out_tongue_closed_eyes:。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// funny-title.js</span>
<span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">OriginTitle</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">titleTime</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">visibilitychange</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">hidden</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">[rel="icon"]</span><span class="dl">'</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">href</span><span class="dl">'</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/favicon.ico</span><span class="dl">"</span><span class="p">);</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">╭(°A°`)╮ 页面崩溃啦 ~</span><span class="dl">'</span><span class="p">;</span>
            <span class="nf">clearTimeout</span><span class="p">(</span><span class="nx">titleTime</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">[rel="icon"]</span><span class="dl">'</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">href</span><span class="dl">'</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/favicon.ico</span><span class="dl">"</span><span class="p">);</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">OriginTitle</span><span class="p">;</span>
            <span class="nx">titleTime</span> <span class="o">=</span> <span class="nf">setTimeout</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
                <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">OriginTitle</span><span class="p">;</span>
            <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">})();</span>
</code></pre></div></div>

<h3 id="5-增加-last_modified-标签">5. 增加 last_modified 标签</h3>

<p>想给有些文章加上 <strong>最后的修改日期</strong> 以方便标识和记忆， 但这个主题的 <code class="language-plaintext highlighter-rouge">last_date</code> 的功能是在文章末尾添加一句最后修改日期， 我想自己加一个和文章日期非常像的样式， 也在文章列表中显示出来的那种。 既然之前操作过 pageview， 已经知道是在 <code class="language-plaintext highlighter-rouge">article-info.html</code> 修改文章样式， 那就模仿已有格式增加。</p>

<ul>
  <li>
    <p>增加 <code class="language-plaintext highlighter-rouge">_show_last_modified</code> 标识以判断是否显示最后修改日期。</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  {%- assign _show_last_modified = include.article.last_modified -%}
</code></pre></div>    </div>
  </li>
  <li>
    <p>增加新的文章信息。</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  {%- if _show_author or _show_date or _pageview or _show_last_modified -%}
    {%- if _show_last_modified -%}
      <span class="nt">&lt;li&gt;</span>
      {%- include snippets/get-locale-string.html key='ARTICLE_DATE_FORMAT' -%}
      <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"far fa-edit"</span><span class="nt">&gt;&lt;/i&gt;</span> <span class="nt">&lt;span&gt;</span>{{ include.article.last_modified | date: __return }}<span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;/li&gt;</span>
    {%- endif -%}
  {%- endif -%}
</code></pre></div>    </div>
  </li>
  <li>
    <p>最后只要在想增加该信息的文章的头部增加如下样式信息就能显示了。</p>

    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="pi">-</span> <span class="na">last_modified</span><span class="pi">:</span> <span class="s">2023-05-20</span> <span class="c1"># 需要和日期的格式一致</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="6-增加-jekyll-seo-tag">6. 增加 jekyll-seo-tag</h3>

<p>按照官网给的指导书就行 <a href="https://github.com/jekyll/jekyll-seo-tag">jekyll/jekyll-seo-tag</a>。</p>]]></content><author><name>HangX-Ma</name></author><category term="Tool" /><category term="TeXt" /><summary type="html"><![CDATA[在此记录一些与 Jekyll TeXt 主题相关的配置细节， 以及问题的解决办法， 不定期更新。]]></summary></entry><entry><title type="html">cs144-sp23, Lab Checkpoint 1: stitching substrings into a byte stream</title><link href="https://hangx-ma.github.io/2023/05/14/cs144-lab1.html" rel="alternate" type="text/html" title="cs144-sp23, Lab Checkpoint 1: stitching substrings into a byte stream" /><published>2023-05-14T00:00:00+08:00</published><updated>2023-05-14T00:00:00+08:00</updated><id>https://hangx-ma.github.io/2023/05/14/cs144-lab1</id><content type="html" xml:base="https://hangx-ma.github.io/2023/05/14/cs144-lab1.html"><![CDATA[<p><a href="https://github.com/HangX-Ma/cs144-sp23/blob/main/lab0.md">Lab Checkpoint 0: networking warmup</a> 直接写了 Markdown 记录 <strong>Networking by hand</strong> 的部分， 另外完成了 <code class="language-plaintext highlighter-rouge">ByteStream</code> 部分的框架。 而看完 Lab1 的实验要求之后， 感觉需要具体分析并厘清思路， 故而在此做一个详细的记录。
<!--more--></p>
<blockquote>
  <p><a href="https://kiprey.github.io/2021/11/cs144-lab1/">Kiprey</a> 2021 年的 Lab1 的记录给予了我帮助和启发。</p>

  <p>该实验通过打印信息进行调试会更有效， 可以自己在 <code class="language-plaintext highlighter-rouge">test</code> 文件中增加自己的测试样例。</p>
</blockquote>

<ul>
  <li>CS144 Spring 2023 实验仓库 <a href="https://github.com/CS144/minnow">CS144/minnow</a>， 备份为 <a href="https://github.com/HangX-Ma/minnow">HangX-Ma/minnow</a> 进行版本回退即可。</li>
  <li>CS144 Spring 2023 Lab1 项目指导书 - <a href="https://github.com/HangX-Ma/cs144-sp23/blob/main/assignment-notes/check1.pdf">Lab Checkpoint 1: stitching substrings into a byte stream</a></li>
  <li>具体的项目实现在个人的 <a href="https://github.com/HangX-Ma/cs144-sp23">Github</a>。</li>
</ul>

<h2 id="1-实验说明">1. 实验说明</h2>

<div align="center">
    <img src="/norobots/images/2023-05-14-cs144-lab1/cs144_lab_structure.png" alt="CS144 Labs'structure" width="800" />
    <br />
    <font size="2" color="#999"><u>CS144 Labs'structure</u></font>
</div>

<p>Lab1 的实验需要完成 <code class="language-plaintext highlighter-rouge">ByteStream</code> 外部的 <code class="language-plaintext highlighter-rouge">StreamReassembler</code> 部分。 Transmission Control Protocol (TCP) 的传输实现是一种可靠的顺序字节流， 尽管底层网络是以 <em>“best effort”</em> 的形式在进行报文的传输。 这意味着在报文传输的过程中， 数据包中的信息很可能会丢失、 重排、 替换、 或者重复。 这需要 TCP 为数据包提供可靠的底层逻辑。</p>

<p>TCP 的发送端会将字节流分割成短的 <code class="language-plaintext highlighter-rouge">segments</code>， 因此这些数据能够契合报文的容量需求。 但正如前述所说， 底层网络可能会使得这些 <code class="language-plaintext highlighter-rouge">segments</code> 变得不那么可靠， 因而 <code class="language-plaintext highlighter-rouge">StreamReassembler</code> 部分需要实现的， 就是在发送端确保发送的数据是连续的字节流。</p>

<h2 id="2-要求">2. 要求</h2>

<p><code class="language-plaintext highlighter-rouge">StreamReassembler</code> 需要遵循一定的规则。 starter code 中提供了两个公有函数对接口进行了一定的限制。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Insert a new substring to be reassembled into a ByteStream.</span>
<span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span> <span class="kt">uint64_t</span> <span class="n">first_index</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">data</span><span class="p">,</span> 
            <span class="kt">bool</span> <span class="n">is_last_substring</span><span class="p">,</span> <span class="n">Writer</span><span class="o">&amp;</span> <span class="n">output</span> <span class="p">);</span>
<span class="c1">// How many bytes are stored in the Reassembler itself?</span>
<span class="kt">uint64_t</span> <span class="n">bytes_pending</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</code></pre></div></div>

<p>另外， 根据实验说明， 原则上 <code class="language-plaintext highlighter-rouge">Reassembler</code> 需要处理以下几种情况：</p>

<ul>
  <li>获取的字节流正好是 <code class="language-plaintext highlighter-rouge">ByteStream</code> 所需的下一组字节， 需要将这些字节直接用 <code class="language-plaintext highlighter-rouge">Writer</code> 写入到 <code class="language-plaintext highlighter-rouge">ByteStream</code> 的缓存中。</li>
  <li><code class="language-plaintext highlighter-rouge">ByteStream</code> 很有可能也会存满， 此时若有一部分字节完成 <code class="language-plaintext highlighter-rouge">Reassembler</code> 处理需要传递给 <code class="language-plaintext highlighter-rouge">ByteStream</code>， 则该部分也需要缓存， 实际上就是该部分也需要占用 <code class="language-plaintext highlighter-rouge">Reassembler</code> 内部的缓存空间， 这个内部的缓存空间就是 <em>unassembled</em> 的部分。</li>
  <li>当收到的字节流能够符合当前的空余空间但在在其更早的字节却不存在的时候 （也就是数据传输产生了空洞， 不连续） 需要将当前收到的字节流在 <code class="language-plaintext highlighter-rouge">Reassembler</code> 中进行缓存。</li>
  <li><code class="language-plaintext highlighter-rouge">Reassembler</code> 会丢弃那些超出当前空余空间的字节。 并且， 传入 <code class="language-plaintext highlighter-rouge">Reassembler</code> 中的子列 （substring） 可能会存在重复以及重叠， 或者有一部分已经被存入 <code class="language-plaintext highlighter-rouge">ByteStream</code> 的缓存中， 这些情况都需要考虑并进行处理。</li>
</ul>

<p>关于存储空间指导书给了下图的提示。</p>

<div align="center">
    <img src="/norobots/images/2023-05-14-cs144-lab1/bytestream_space_interpretation.png" alt="Memory usage limitation of Reassembler and ByteStream" width="800" />
    <br />
    <font size="2" color="#999"><u>Memory usage limitation of Reassembler and ByteStream</u></font>
</div>

<p><code class="language-plaintext highlighter-rouge">Reassembler</code> 与 <code class="language-plaintext highlighter-rouge">ByteStream</code> 的内存上限是之前 Lab0 中规定的 <code class="language-plaintext highlighter-rouge">capacity</code> 的大小。 对于 <code class="language-plaintext highlighter-rouge">Reassembler</code> 而言， <code class="language-plaintext highlighter-rouge">capacity = first_unacceptable_index - first_unpopped_index</code>。 <code class="language-plaintext highlighter-rouge">ByteStream</code> 相对于 <code class="language-plaintext highlighter-rouge">Reassembler</code> 更为底层， 位于网络收发的端口， 负责实际的收发工作。 所以对于途中的几个 <em>first</em> 开头的索引其具备如下含义：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">first_unpopped_index</code>： 已经排序整理且验证正确的部分的起始索引， 这部分（绿色区块）存储在 <code class="language-plaintext highlighter-rouge">ByteStream</code> 的缓存中等待发送。</li>
  <li><code class="language-plaintext highlighter-rouge">first_unassembled_index</code>： 尚未排序的整理验证的部分， 可称其为子列 （substrings）的起始索引， 这部分（红色区块）存储在 <code class="language-plaintext highlighter-rouge">Reassembler</code> 的内部缓存区域。</li>
  <li><code class="language-plaintext highlighter-rouge">first_unacceptable_index</code>： 需要被丢弃的部分的起始索引。</li>
</ul>

<h2 id="3-实现思路">3. 实现思路</h2>

<p>依据 <code class="language-plaintext highlighter-rouge">Memory usage limitation of Reassembler and ByteStream</code> 图中所示的几个 <em>index</em>， 其中最为关键的两个应当是 <code class="language-plaintext highlighter-rouge">first_unpopped_index</code> 和 <code class="language-plaintext highlighter-rouge">first_unacceptable_index</code>。 框架程序提供的两个方法函数是不够用的， 我们需要定义几个私有变量以便存储关键信息：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unassembled_index_</code>： 表示 <code class="language-plaintext highlighter-rouge">first_unassembled_index</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">unassembled_substrings_</code>： 表示 <em>unassembled</em> 部分的缓存集， 为 <em>map</em> 类型， 可以将存储的 <em>first_index</em> 与其对应的 <em>data</em> 进行映射， 并提高查找速度。</li>
  <li><code class="language-plaintext highlighter-rouge">is_closed_</code>： 表示接受端已收到最后一节 <em>substring</em>， 并且 <code class="language-plaintext highlighter-rouge">pending_buffer_</code> 也已清空， 此时应当终止此次数据的接收。</li>
</ul>

<p>另外也对框架代码所给的两个函数的变量与功能进行说明：</p>

<ol>
  <li>
    <p><strong>insert</strong></p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span> <span class="kt">uint64_t</span> <span class="n">first_index</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">data</span><span class="p">,</span> 
         <span class="kt">bool</span> <span class="n">is_last_substring</span><span class="p">,</span> <span class="n">Writer</span><span class="o">&amp;</span> <span class="n">output</span> <span class="p">);</span>
</code></pre></div>    </div>

    <p>传输 <em>substring</em> 至 <code class="language-plaintext highlighter-rouge">ByteStream</code> 的主体方法， 包含大部分逻辑实现。</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">first_index</code>： <em>substring</em> 数据的第一个 index， 需要和上述 <code class="language-plaintext highlighter-rouge">unassembled_index_</code> 进行区分。</li>
      <li><code class="language-plaintext highlighter-rouge">data</code>： 需要进行传输的 <em>substring</em> 数据。</li>
      <li><code class="language-plaintext highlighter-rouge">is_last_substring</code>： 最后一条 <em>substring</em> 的标志变量。</li>
      <li><code class="language-plaintext highlighter-rouge">output</code>： <code class="language-plaintext highlighter-rouge">ByteStream</code> 中实现的 <code class="language-plaintext highlighter-rouge">Writer</code> 类， 将数据写入（push）传输缓存， 这部分信息会被远端的 <code class="language-plaintext highlighter-rouge">Reader</code> 类导出(pop)接收。</li>
    </ul>
  </li>
  <li>
    <p><strong>bytes_pending</strong></p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">uint64_t</span> <span class="n">bytes_pending</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</code></pre></div>    </div>

    <p>剩余仍存留在 <code class="language-plaintext highlighter-rouge">unassembler</code> 缓存部分的数据大小， 该部分和 <code class="language-plaintext highlighter-rouge">[first_unassembled_index, first_unacceptable_index]</code> 区间的 <code class="language-plaintext highlighter-rouge">available_capability</code> 毫无关系， 需要区分。 <code class="language-plaintext highlighter-rouge">available_capability</code> 表示当前能够接收的 <code class="language-plaintext highlighter-rouge">substring</code> 最大的大小。</p>
  </li>
</ol>

<h3 id="30-符号说明与特殊处理">3.0 符号说明与特殊处理</h3>

<h4 id="符号说明">符号说明</h4>

<ul>
  <li>重叠部分： 以 <code class="language-plaintext highlighter-rouge">=</code> 表示子列和存于 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 中或已传入 <code class="language-plaintext highlighter-rouge">ByteStream</code> 中的数据重叠的 <em>index</em>。</li>
  <li>当前数据： 以 <code class="language-plaintext highlighter-rouge">&gt;</code> 表示当前数据。</li>
  <li>front数据： 以 <code class="language-plaintext highlighter-rouge">F</code> 表示与当前数据最邻近的保存在 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 中的那段数据， 这段数据的 <em>first_index</em> 比当前传入数据的 <em>first_index</em> 要小。</li>
  <li>rear数据： 以 <code class="language-plaintext highlighter-rouge">R</code> 表示与当前数据最邻近的保存在 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 中的那段数据， 这段数据的 <em>first_index</em> 比当前传入数据的 <em>first_index</em> 要大。</li>
</ul>

<h4 id="特殊情况">特殊情况</h4>

<p>对于特殊情况可以跳过后续繁琐的处理逻辑， 加快处理速度。 对于传入的 <em>substring</em> 而言， 有如下几种特殊情况可以跳过处理直接返回：</p>

<ul>
  <li><strong>数据重复</strong>， 这意味着 <code class="language-plaintext highlighter-rouge">first_index + data.size() - 1 &lt; unassembled_index_</code>， 传入的 <em>substring</em> 已经是 <code class="language-plaintext highlighter-rouge">ByteStream</code> 的一部分， 无需重复传输数据。</li>
  <li><strong>缓存不足</strong>， <code class="language-plaintext highlighter-rouge">first_index_ &gt;= unassembled_substrings_ + available_capability</code>， 相当于 <code class="language-plaintext highlighter-rouge">first_index</code> 处于 <code class="language-plaintext highlighter-rouge">first_unacceptable_index</code> 之后的区间， 意味着该 <em>substring</em> 需要被丢弃。 或者 <em><code class="language-plaintext highlighter-rouge">available_capability == 0</code></em>， 此时已经没有空间用于处理。</li>
  <li><strong>空子列</strong>， <em>substring</em> 传入的 data 的大小为零。</li>
</ul>

<h3 id="31-unassembled_index_--first_index">3.1 unassembled_index_ &gt;= first_index</h3>

<p>这意味着此时传入的 substring 的一部分是已经传入 <code class="language-plaintext highlighter-rouge">ByteStream</code> 中的， 或者全都已经传入了 <code class="language-plaintext highlighter-rouge">ByteStream</code>。 还有可能有一部分和已经在 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 中缓存的数据重叠， 那么重叠的部分就需要被丢弃。</p>

<ul>
  <li>
    <p>部分重叠</p>

    <p>这种情况和有 <code class="language-plaintext highlighter-rouge">rear</code> 部分的处理会差不多， 所以在代码实现上做了整合， 实时细节在 <a href="#32-unassembled_index_--first_index">3.2</a> 节讨论， 唯一有区别的就是在此时需要截断 <code class="language-plaintext highlighter-rouge">[first_index, unassembled_index_]</code> 之间的数据。</p>

    <p>进行截断后的数据是从 <code class="language-plaintext highlighter-rouge">unassembled_index</code> 起始的， 需要检查截断后的 <em>data</em> 的长度， 若截断后的 <em>data</em> 的长度超过了 <em>available_capability</em> 那么需要取 <code class="language-plaintext highlighter-rouge">min(data.size() - overlapped_length, available_capability())</code>。</p>

    <pre><code class="language-txt">      first_index  unassembled_index_
          v                v      REPEATED_IN_MAP
  --------+----------------+-----------+---+------+------
          |================|&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;|===|RRRRRR|      
  --------+----------------+-----------+---+------+------
                                                  ^
                                      first_index + data.size() - 1
</code></pre>

    <pre><code class="language-txt">      first_index  unassembled_index_
          v                v      REPEATED_IN_MAP
  --------+----------------+-----------+---+------+------
          |================|&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;|===|&gt;&gt;&gt;&gt;&gt;&gt;|      
  --------+----------------+-----------+---+------+------
                                                  ^
                                      first_index + data.size() - 1
</code></pre>
  </li>
  <li>
    <p>全部重叠</p>

    <p>这种情况是部分重叠的特殊子集， 已经在特殊情况中处理掉了。</p>

    <pre><code class="language-txt">      first_index     unassembled_index_
          v                   v
  --------+-------------------+--------------------------
          |===================|           ...            
  --------+-------------------+--------------------------
                              ^
                  first_index + data.size() - 1
</code></pre>
  </li>
</ul>

<h3 id="32-unassembled_index_--first_index">3.2 unassembled_index_ &lt; first_index</h3>

<p>在 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 中的数据有些是连续的， 有些则不是连续的， 我们在保存数据的时候是以当前要保存的 <em>data</em> 与该 <em>data</em> 的 <em>first_index</em> 值进行映射的。 那么， 最复杂的情况是， 当前的这段数据正好恰在两段已缓存在 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 之间。 这种情况也是需要进行数据截断的， 当前数据可能会超出最大索引值的范围， 这种情况发生在 <code class="language-plaintext highlighter-rouge">first_index + data.size() - 1 &gt; unassembled_index_ + cap - 1</code> 的时候。</p>

<ol>
  <li>
    <p>讨论传入数据的 <em>first_index</em> 比保存在 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 中最邻近的数据的 <em>fisrt_index</em> 小的那部分数据。 可将 <em>index</em> 值较大段的数据称为_rear_index_， 当前数据的 <em>index</em> 仍称作 <em>first_index</em>。 可通过 <code class="language-plaintext highlighter-rouge">map::lower_bound(first_index)</code> 获取大于等于 <code class="language-plaintext highlighter-rouge">first_index</code> 的迭代器。</p>

    <ul>
      <li>
        <p>没有重叠</p>

        <p>则当前的 <em>substring</em> 可以直接保存在 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 中， 无需做额外的处理， 判断 <code class="language-plaintext highlighter-rouge">first_index + data.size() - 1 &lt; rear_index</code> 即可。</p>

        <pre><code class="language-txt">                      first_index  rear_index
                          v            v
  ----------------------- +----+-------+-------------------+-----------------
                          |&gt;&gt;&gt;&gt;|       |RRRRRRRRRRRRRRRRRRR|       ...
  ----------------------- +----+-------+-------------------+-----------------
                               ^                           ^
                  first_index + data.size() - 1    rear_index + rear_data.size() - 1
</code></pre>
      </li>
      <li>
        <p>部分重叠， 与 <a href="#31-unassembled_index_--first_index">3.1</a> 节中的情况类似， 需要截断当前的 <em>substring</em> 重复的部分即可， 若截断 <code class="language-plaintext highlighter-rouge">rear</code> 部分重复的数据， 则还需要重新更新 <code class="language-plaintext highlighter-rouge">unassemble_substrings_</code>， 效率不高。 需要满足 <code class="language-plaintext highlighter-rouge">first_index + data.size() - 1 &lt; rear_index + rear_data.size() - 1</code> 的条件， 否则就会变成全部重叠的情况。 此时的重叠部分长度就是 <code class="language-plaintext highlighter-rouge">first_index + data.size() - rear_index</code>。</p>

        <pre><code class="language-txt">              first_index  rear_index
                  v           v
  ----------------+-----------+-------+-----------------------+-------------
                  |&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;|=======|RRRRRRRRRRRRRRRRRRRRRRR|    ...
  ----------------+-----------+-------+-----------------------+-------------
                                      ^                       ^
                          first_index + data.size() - 1  rear_index + rear_data.size() - 1
</code></pre>
      </li>
      <li>
        <p>全部重叠
  以 <code class="language-plaintext highlighter-rouge">rear</code> 存在全部重叠为例， 这种情况就直接将 <code class="language-plaintext highlighter-rouge">rear</code> 从 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 中移除即可。</p>

        <p>需要注意处理完一个最邻近的 <em>substring</em> 后， 可能新的最邻近的 <em>substring</em> 也需要进行处理， 这一般发生在 <em>substring</em> 产生全部重叠的时候， 这能确保当前保存的 <em>substring</em> 的正确性。 更新迭代器时需要更新为 <code class="language-plaintext highlighter-rouge">map::lower_bound(rear_index + rear_data.size() - 1)</code>， 才能跨过当前的 <code class="language-plaintext highlighter-rouge">rear</code> 找到 <code class="language-plaintext highlighter-rouge">next_rear</code> 继续进行处理， <code class="language-plaintext highlighter-rouge">next_rear</code> 也可能还在当前的 <em>data</em> 的覆盖范围。</p>
      </li>
    </ul>

    <pre><code class="language-txt">             first_index  rear_index
                 v           v
 ----------------+-----------+-------+------------+---+------+-------------
                 |&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;|=======|&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;?????&gt;&gt;&gt;&gt;&gt;&gt;|    ...
 ----------------+-----------+-------+------------+---+------+-------------
                                     ^                       ^
                         rear_index + rear_data.size() - 1  first_index + data.size() - 1
</code></pre>
  </li>
  <li>
    <p>讨论当前传入数据与保存在 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 中 <em>first_index</em> 比当前数据的 <em>first_index</em> 小的最邻近那部分数据的关系。 可将 <em>index</em> 较小段的数据称为 <em>front_index</em>， 当前数据的 <em>index</em> 仍称作 <code class="language-plaintext highlighter-rouge">first_index</code>。 与 <code class="language-plaintext highlighter-rouge">rear</code> 不同的是， 最多只有一个 <code class="language-plaintext highlighter-rouge">front</code> 数据存在。 若 <code class="language-plaintext highlighter-rouge">map::lower_bound(first_index)</code> 得到的迭代器不是 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 的头部， 说明存在 <code class="language-plaintext highlighter-rouge">front</code>， 只需要将该位置所在的迭代器向前更新一步即可。 相较从头向后扫描查找与 <code class="language-plaintext highlighter-rouge">front</code> 重叠， 这种办法仅需一次操作即可完成。</p>

    <ul>
      <li>
        <p>没有重叠</p>

        <p>则当前的 <em>substring</em> 可以直接保存在 <code class="language-plaintext highlighter-rouge">unassembled_substrings_</code> 中， 无需做额外的处理。</p>

        <pre><code class="language-txt">  unassembled_index_  front_index   first_index
          v              v            v
  --------+--------------+----+-------+-------------------+-----------------
          |              |FFFF|       |&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;|       ...
  --------+--------------+----+-------+-------------------+-----------------
                              ^                           ^
                  front_index + front_data.size() - 1    first_index + data.size() - 1
</code></pre>
      </li>
      <li>
        <p>部分重叠</p>

        <p>与 <a href="#31-unassembled_index_--first_index">3.1</a> 节中的情况类似， 只需要截断当前的 <em>substring</em> 重复的部分即可， 也可以截断 <code class="language-plaintext highlighter-rouge">front</code> 重复的部分。</p>

        <pre><code class="language-txt">  unassembled_index_  front_index  first_index  
          v              v            v
  --------+--------------+------------+---+---------------+-----------------
          |              |FFFFFFFFFFFF|===|&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;|       ...
  --------+--------------+------------+---+---------------+-----------------
                                          ^               ^
                                              first_index + data.size() - 1
                              front_index + front_data.size() - 1
</code></pre>
      </li>
      <li>
        <p>全部重叠</p>

        <p>此时的处理会和 <code class="language-plaintext highlighter-rouge">rear</code> 部分有所区别， 调用 <code class="language-plaintext highlighter-rouge">erase</code> 处理 <em>data</em> 时是从前向后， 而 <code class="language-plaintext highlighter-rouge">rear</code> 是从后向前。</p>

        <pre><code class="language-txt">              front_index  first_index
                  v           v
  ----------------+-----------+-------+-----------------------+-------------
                  |FFFFFFFFFFF|=======|FFFFFFFFFFFFFFFFFFFFFFF|    ...
  ----------------+-----------+-------+-----------------------+-------------
                                      ^                       ^
                          first_index + data.size() - 1  front_index + front_data.size() - 1
</code></pre>
      </li>
    </ul>
  </li>
</ol>

<h3 id="33-补充">3.3 补充</h3>

<p>最后将数据加入 <code class="language-plaintext highlighter-rouge">map</code> 缓存的时候需要特别判断 <code class="language-plaintext highlighter-rouge">data.size() &gt; 0</code>， 因为在之前的处理中很可能 <em>data</em> 已经没有实际数据存在了， 这样就不需要将这部分数据放到 <code class="language-plaintext highlighter-rouge">map</code> 结构中。 除此之外， 在调用 <code class="language-plaintext highlighter-rouge">output.push</code> 的时候需要判断前后的 <code class="language-plaintext highlighter-rouge">output.bytes_pushed</code> 的情况， 很可能有一部分数据并没有被传入 <code class="language-plaintext highlighter-rouge">ByteStream</code> 的缓存中， 需要我们手动将这部分数据再保存在 <code class="language-plaintext highlighter-rouge">map</code> 中， 但不要忘了调用 <code class="language-plaintext highlighter-rouge">erase</code> 将之前的 push 不完整的那段数据从 <code class="language-plaintext highlighter-rouge">map</code> 中删除。 在遍历 <code class="language-plaintext highlighter-rouge">map</code> 查找可以传入 <code class="language-plaintext highlighter-rouge">ByteStream</code> 的数据的时候， 一旦发现 <em>unassembled_index</em> 和获取的 <code class="language-plaintext highlighter-rouge">sub_index</code> 不一致了， 就可以直接跳出循环， 这意味着数据已经不连续了， 没有必要继续数据传递的进程了。</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">reassembler_win.cc</code> 测试不通过， 可能是迭代器更新不对， 以及 <code class="language-plaintext highlighter-rouge">lower_bound</code> 可能用了 <code class="language-plaintext highlighter-rouge">upper_bound</code> 没找到对应的位置。</p>

  <p><code class="language-plaintext highlighter-rouge">reassembler_speed_test.cc</code> 测试发现读取和写入数据不一致， 可能就是没有考虑 push 时仅有一部分数据被传入了 <code class="language-plaintext highlighter-rouge">ByteStream</code> 而导致数据丢失。</p>
</blockquote>

<h2 id="4-测试结果">4. 测试结果</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cs144@cs144-ubuntu22:~/cs144-sp23/minnow<span class="nv">$ </span>cmake <span class="nt">--build</span> build <span class="nt">--target</span> check1
Test project /home/cs144/cs144-sp23/minnow/build
      Start  1: compile with bug-checkers
 1/17 Test  <span class="c">#1: compile with bug-checkers ........   Passed    4.03 sec</span>
      Start  3: byte_stream_basics
 2/17 Test  <span class="c">#3: byte_stream_basics ...............   Passed    0.02 sec</span>
      Start  4: byte_stream_capacity
 3/17 Test  <span class="c">#4: byte_stream_capacity .............   Passed    0.03 sec</span>
      Start  5: byte_stream_one_write
 4/17 Test  <span class="c">#5: byte_stream_one_write ............   Passed    0.03 sec</span>
      Start  6: byte_stream_two_writes
 5/17 Test  <span class="c">#6: byte_stream_two_writes ...........   Passed    0.02 sec</span>
      Start  7: byte_stream_many_writes
 6/17 Test  <span class="c">#7: byte_stream_many_writes ..........   Passed    0.06 sec</span>
      Start  8: byte_stream_stress_test
 7/17 Test  <span class="c">#8: byte_stream_stress_test ..........   Passed    0.03 sec</span>
      Start  9: reassembler_single
 8/17 Test  <span class="c">#9: reassembler_single ...............   Passed    0.02 sec</span>
      Start 10: reassembler_cap
 9/17 Test <span class="c">#10: reassembler_cap ..................   Passed    0.02 sec</span>
      Start 11: reassembler_seq
10/17 Test <span class="c">#11: reassembler_seq ..................   Passed    0.03 sec</span>
      Start 12: reassembler_dup
11/17 Test <span class="c">#12: reassembler_dup ..................   Passed    0.04 sec</span>
      Start 13: reassembler_holes
12/17 Test <span class="c">#13: reassembler_holes ................   Passed    0.02 sec</span>
      Start 14: reassembler_overlapping
13/17 Test <span class="c">#14: reassembler_overlapping ..........   Passed    0.02 sec</span>
      Start 15: reassembler_win
14/17 Test <span class="c">#15: reassembler_win ..................   Passed    0.30 sec</span>
      Start 16: compile with optimization
15/17 Test <span class="c">#16: compile with optimization ........   Passed    1.57 sec</span>
      Start 17: byte_stream_speed_test
             ByteStream throughput: 2.26 Gbit/s
16/17 Test <span class="c">#17: byte_stream_speed_test ...........   Passed    0.25 sec</span>
      Start 18: reassembler_speed_test
             Reassembler throughput: 8.10 Gbit/s
17/17 Test <span class="c">#18: reassembler_speed_test ...........   Passed    0.36 sec</span>

100% tests passed, 0 tests failed out of 17

Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   6.87 sec
Built target check1
</code></pre></div></div>]]></content><author><name>HangX-Ma</name></author><category term="Course" /><category term="cs144" /><summary type="html"><![CDATA[Lab Checkpoint 0: networking warmup 直接写了 Markdown 记录 Networking by hand 的部分， 另外完成了 ByteStream 部分的框架。 而看完 Lab1 的实验要求之后， 感觉需要具体分析并厘清思路， 故而在此做一个详细的记录。]]></summary></entry><entry><title type="html">vscode(win): vim keyboard mapping</title><link href="https://hangx-ma.github.io/2023/03/14/vsvim-keyborad-setting.html" rel="alternate" type="text/html" title="vscode(win): vim keyboard mapping" /><published>2023-03-14T00:00:00+08:00</published><updated>2023-03-14T00:00:00+08:00</updated><id>https://hangx-ma.github.io/2023/03/14/vsvim-keyborad-setting</id><content type="html" xml:base="https://hangx-ma.github.io/2023/03/14/vsvim-keyborad-setting.html"><![CDATA[<p>参考了知乎博主 <strong>云崖君</strong> 的 <a href="https://zhuanlan.zhihu.com/p/430603620#circle=on">vscode + vim 全键盘操作高效搭配方案</a>， 仅用以记录个人使用配置， 内容较为简略。 配置文件可见 <code class="language-plaintext highlighter-rouge">setting.json</code> 以及 <code class="language-plaintext highlighter-rouge">keybindings.json</code>。</p>

<!--more-->
<p><a href="https://github.com/HangX-Ma/dotfiles/blob/main/vscode/vim/settings.json" class="button button--outline-primary button--pill">setting.json</a> <a href="https://github.com/HangX-Ma/dotfiles/blob/main/vscode/vim/keybindings.json" class="button button--outline-primary button--pill">keybindings.json</a></p>

<h2 id="1-指令总览">1. 指令总览</h2>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>------------ 资源管理 ------------
j     ： 向下移动
k     ： 向上移动
space ： 打开文件或目录
​
新增：​
alt+x ： 折叠文件夹
i     ： 新增文件
o     ： 新增目录
r     ： 刷新目录
a     ： 重命名文件或目录
d     ： 删除文件或目录
x     ： 剪切文件或目录
y     ： 复制文件或目录
p     ： 粘贴文件或目录

------------ 全局配置 ------------
ctrl + g c ： 显示命令面板
ctrl + g s ： 打开设置页面
ctrl + g p ： 工作空间文件快速打开
ctrl + g m ： 打开一个目录
ctrl + g f ： 打开一个文件
ctrl + g h ： 打开最近记录
ctrl + g n ： 新建vscode实例
ctrl + g q ： 关闭vscode示例

ctrl + f n ： 新建文件
ctrl + f o ： 打开文件
ctrl + f e ： 另存为文件
ctrl + f s ： 保存文件
ctrl + f w ： 保存所有文件
ctrl + f q ： 关闭文件
ctrl + f a ： 关闭所有文件

ctrl + n [ ： 切换侧边栏显示状态
ctrl + n 1 ： 显示文件资源管理器
ctrl + n 2 ： 显示全局搜索
ctrl + n 3 ： 显示版本控制
ctrl + n 4 ： 显示debug
ctrl + n 5 ： 显示插件商店
ctrl + n 6 ： 显示TODO Tree
ctrl + n 7 ： 显示Bookmark
​ctrl + n 7 ： 显示cnblog account

ctrl + p [ ： 切换面板显示状态
ctrl + p 1 ： 显示问题
ctrl + p 2 ： 显示输出
ctrl + p 3 ： 显示终端
ctrl + p 4 ： 显示调试控制台

ctrl + q ：关闭当前选项卡或分屏
ctrl + e ：聚焦在第一个选项卡中
ctrl + , ：切换到上一个选项卡
ctrl + . ：切换到下一个选项卡
​
ctrl + w s ：拆分一个上下分屏
ctrl + w v ：拆分一个左右分屏
​
ctrl + w k ：将光标向上移动1屏
ctrl + w j ：将光标向下移动1屏
​
ctrl + w h ：将光标向左移动1屏
ctrl + w l ：将光标向右移动1屏

ctrl + h ： 触发帮助提示
ctrl + j ： 触发参数提示
ctrl + k ： 触发建议提示
ctrl + n ： 移动到下一个建议
ctrl + p ： 移动到上一个建议
tab      ： 选择下一个建议
enter    ： 选择当前建议

zz       ： 切换代码折叠（原生vim的zz不是切换折叠）
<span class="nt">&lt;c-n&gt;</span>    ： 取消搜索高亮
g[       ： 跳转到上一个问题
g]       ： 跳转到下一个问题

ctrl + alt + l ： 格式化代码（个人习惯）
 ​
ctrl + = ： 放大字体
ctrl + - ： 缩小字体

ctrl + [ ： 快速缩进
ctrl + ] ： 快速退格

<span class="gs">** 编辑模式下生效 **</span>
alt + j  ： 光标上移
alt + k  ： 光标下移
alt + h  ： 光标左移
alt + l  ： 光标右移

alt + ,  ： Go backward
alt + .  ： Go forward

<span class="gs">** 内嵌指令 **</span>
<span class="nt">&lt;leader&gt;&lt;leader&gt;</span>s<span class="nt">&lt;char&gt;</span> ： 快速定位

ds<span class="nt">&lt;existing&gt;</span>            ： 删除符号
cs<span class="nt">&lt;existing&gt;&lt;desired&gt;</span>   ：替换符号

gcc ：行注释
gCC ：块注释

gd ： 跳转到函数定义或引用处，搭配 ctrl+i/ctrl+o 查看源码很方便
gh ： 触发帮助提示
gb ： 开启多光标模式，选中和当前单词相同的单词
</code></pre></div></div>

<h2 id="2-基础配置项-settingsjson">2. 基础配置项 (settings.json)</h2>

<h3 id="21-代码控制区域热键方案">2.1 代码控制区域热键方案</h3>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zz       ： 切换代码折叠（原生vim的zz不是切换折叠）
<span class="nt">&lt;c-n&gt;</span>    ： 取消搜索高亮
g[       ： 跳转到上一个问题
g]       ： 跳转到下一个问题
</code></pre></div></div>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="err">/*</span><span class="w"> </span><span class="err">setting.json</span><span class="w"> </span><span class="err">*/</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">绑定vim前导键</span><span class="w">
    </span><span class="nl">"vim.leader"</span><span class="p">:</span><span class="w"> </span><span class="s2">"&lt;space&gt;"</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">启用easymotion插件</span><span class="w">
    </span><span class="nl">"vim.easymotion"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">启用系统粘贴板作为vim寄存器</span><span class="w">
    </span><span class="nl">"vim.useSystemClipboard"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">由vim接管ctrl+any的按键，而不是vscode</span><span class="w">
    </span><span class="nl">"vim.useCtrlKeys"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">突出显示与当前搜索匹配的所有文本</span><span class="w">
    </span><span class="nl">"vim.hlsearch"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">普通模式下的非递归按键绑定</span><span class="w">
    </span><span class="nl">"vim.normalModeKeyBindingsNonRecursive"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">toggle</span><span class="w"> </span><span class="err">Fold</span><span class="w">
        </span><span class="nl">"before"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"z"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"z"</span><span class="p">,</span><span class="w">
        </span><span class="p">],</span><span class="w">
        </span><span class="nl">"commands"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"editor.toggleFold"</span><span class="w">
        </span><span class="p">]</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">cancel</span><span class="w"> </span><span class="err">highlight</span><span class="w">
            </span><span class="nl">"before"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"&lt;C-n&gt;"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"commands"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">":nohl"</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">previous</span><span class="w"> </span><span class="err">problem</span><span class="w"> 
        </span><span class="nl">"before"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"g"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"["</span><span class="p">,</span><span class="w">
        </span><span class="p">],</span><span class="w">
        </span><span class="nl">"commands"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"editor.action.marker.prevInFiles"</span><span class="w">
        </span><span class="p">]</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">next</span><span class="w"> </span><span class="err">problem</span><span class="w"> 
        </span><span class="nl">"before"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"g"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"]"</span><span class="p">,</span><span class="w">
        </span><span class="p">],</span><span class="w">
        </span><span class="nl">"commands"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"editor.action.marker.nextInFiles"</span><span class="w">
        </span><span class="p">]</span><span class="w">
        </span><span class="p">},</span><span class="w">
    </span><span class="p">]</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">插入模式下的非递归按键绑定</span><span class="w">
    </span><span class="nl">"vim.insertModeKeyBindings"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">命令模式下的非递归按键绑定</span><span class="w">
    </span><span class="nl">"vim.commandLineModeKeyBindingsNonRecursive"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">可视模式下的非递归按键绑定</span><span class="w">
    </span><span class="nl">"vim.operatorPendingModeKeyBindings"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">下面定义的按键将交由vscode进行处理，而不是vscode-vim插件</span><span class="w">
    </span><span class="nl">"vim.handleKeys"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"&lt;C-a&gt;"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
        </span><span class="nl">"&lt;C-f&gt;"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<h3 id="22-热键配置区域说明">2.2 热键配置区域说明</h3>

<p>基本上vim的所有模式你都可以配置在下面的4个选项中：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="err">//</span><span class="w"> </span><span class="err">普通模式下的非递归按键绑定</span><span class="w">
    </span><span class="nl">"vim.normalModeKeyBindingsNonRecursive"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">插入模式下的非递归按键绑定</span><span class="w">
    </span><span class="nl">"vim.insertModeKeyBindings"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">命令模式下的非递归按键绑定</span><span class="w">
    </span><span class="nl">"vim.commandLineModeKeyBindingsNonRecursive"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">可视模式下的非递归按键绑定</span><span class="w">
    </span><span class="nl">"vim.operatorPendingModeKeyBindings"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<h2 id="3-自用热键方案-keybindingsjson">3. 自用热键方案 (keybindings.json)</h2>

<p><strong>vim+vscode 全键盘热键方案</strong> - 对于非代码编辑区的热键将其定义在 <code class="language-plaintext highlighter-rouge">keybindings.json</code> 中，对于代码编辑区且属于 vim 的热键将其定义在 <code class="language-plaintext highlighter-rouge">settings.json</code> 文件中。</p>

<h3 id="31-全局配置">3.1 全局配置</h3>

<h4 id="311-全局命令定义">3.1.1 全局命令定义</h4>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">ctrl</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">g</span><span class="w"> </span><span class="err">c</span><span class="w"> </span><span class="err">：</span><span class="w"> </span><span class="err">显示命令面板</span><span class="w">
</span><span class="err">ctrl</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">g</span><span class="w"> </span><span class="err">s</span><span class="w"> </span><span class="err">：</span><span class="w"> </span><span class="err">打开设置页面</span><span class="w">
</span><span class="err">ctrl</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">g</span><span class="w"> </span><span class="err">p</span><span class="w"> </span><span class="err">：</span><span class="w"> </span><span class="err">工作空间文件快速打开</span><span class="w">
</span><span class="err">ctrl</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">g</span><span class="w"> </span><span class="err">m</span><span class="w"> </span><span class="err">：</span><span class="w"> </span><span class="err">打开一个目录</span><span class="w">
</span><span class="err">ctrl</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">g</span><span class="w"> </span><span class="err">f</span><span class="w"> </span><span class="err">：</span><span class="w"> </span><span class="err">打开一个文件</span><span class="w">
</span><span class="err">ctrl</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">g</span><span class="w"> </span><span class="err">h</span><span class="w"> </span><span class="err">：</span><span class="w"> </span><span class="err">打开最近记录</span><span class="w">
</span><span class="err">ctrl</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">g</span><span class="w"> </span><span class="err">n</span><span class="w"> </span><span class="err">：</span><span class="w"> </span><span class="err">新建vscode实例</span><span class="w">
</span><span class="err">ctrl</span><span class="w"> </span><span class="err">+</span><span class="w"> </span><span class="err">g</span><span class="w"> </span><span class="err">q</span><span class="w"> </span><span class="err">：</span><span class="w"> </span><span class="err">关闭vscode示例</span><span class="w">
</span></code></pre></div></div>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="err">//</span><span class="w"> </span><span class="err">---</span><span class="w"> </span><span class="err">global</span><span class="w"> </span><span class="err">command</span><span class="w"> </span><span class="err">---</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示命令面板</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+g c"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.showCommands"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">打开设置页面</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+g s"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.openSettings"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">工作空间文件快速打开</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+g p"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.quickOpen"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">打开一个目录</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+g m"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.files.openFolder"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">打开一个文件</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+g f"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.files.openFile"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">打开最近记录</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+g h"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.openRecent"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">新建vscode实例</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+g n"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.newWindow"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">关闭vscode实例</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+g q"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.closeWindow"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<h4 id="312-文件命令定义">3.1.2 文件命令定义</h4>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ctrl + f n ： 新建文件
ctrl + f o ： 打开文件
ctrl + f e ： 另存为文件
ctrl + f s ： 保存文件
ctrl + f w ： 保存所有文件
ctrl + f q ： 关闭文件
ctrl + f a ： 关闭所有文件
</code></pre></div></div>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="err">//</span><span class="w"> </span><span class="err">---</span><span class="w"> </span><span class="err">file</span><span class="w"> </span><span class="err">command</span><span class="w"> </span><span class="err">---</span><span class="w"> 
    </span><span class="err">//</span><span class="w"> </span><span class="err">新建文件</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+f n"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"welcome.showNewFileEntries"</span><span class="p">,</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">打开文件</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+f o"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.files.openFileFolder"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">另存为文件</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+f e"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.files.saveAs"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">保存文件</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+f s"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.files.save"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">保存所有文件</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+f w"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.files.saveAll"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">关闭文件</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+f q"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.closeActiveEditor"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">关闭所有文件</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+f a"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.closeAllEditors"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<h4 id="313-侧边栏命令定义">3.1.3 侧边栏命令定义</h4>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ctrl + n [ ： 切换侧边栏显示状态
ctrl + n 1 ： 显示文件资源管理器
ctrl + n 2 ： 显示全局搜索
ctrl + n 3 ： 显示版本控制
ctrl + n 4 ： 显示debug
ctrl + n 5 ： 显示插件商店
ctrl + n 6 ： 显示TODO Tree
ctrl + n 7 ： 显示Bookmark
​ctrl + n 7 ： 显示cnblog account
</code></pre></div></div>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="err">//</span><span class="w"> </span><span class="err">---</span><span class="w"> </span><span class="err">side</span><span class="w"> </span><span class="err">bar</span><span class="w"> </span><span class="err">command</span><span class="w"> </span><span class="err">---</span><span class="w"> 
    </span><span class="err">//</span><span class="w"> </span><span class="err">切换侧边栏显示状态</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+n ["</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.toggleSidebarVisibility"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示文件资源管理器</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+n 1"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.files.action.focusFilesExplorer"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示全局搜索</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+n 2"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.replaceInFiles"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示版本控制</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+n 3"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.view.scm"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.scm.active"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示debug</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+n 4"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.view.debug"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"viewContainer.workbench.view.debug.enabled"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示插件商店</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+n 5"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.view.extensions"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"viewContainer.workbench.view.extensions.enabled"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示TODO</span><span class="w"> </span><span class="err">Tree</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+n 6"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"todo-tree-view.focus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示Bookmark</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+n 7"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bookmarksExplorer.focus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">cnblogs-account</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+n 8"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cnblogs-account.focus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<h4 id="314-面板命令定义">3.1.4 面板命令定义</h4>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ctrl + p [ ： 切换面板显示状态
ctrl + p 1 ： 显示问题
ctrl + p 2 ： 显示输出
ctrl + p 3 ： 显示终端
ctrl + p 4 ： 显示调试控制台
</code></pre></div></div>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="err">//</span><span class="w"> </span><span class="err">---</span><span class="w"> </span><span class="err">panel</span><span class="w"> </span><span class="err">command</span><span class="w"> </span><span class="err">---</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">切换面板显示状态</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+p ["</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.togglePanel"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示问题</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+p 1"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.panel.markers.view.focus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示输出</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+p 2"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.output.toggleOutput"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.panel.output.active"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示终端</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+p 3"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.terminal.toggleTerminal"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"terminal.active"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">显示调试控制台</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+p 4"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.debug.action.toggleRepl"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.panel.repl.view.active"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<h4 id="315-编辑区命令定义">3.1.5 编辑区命令定义</h4>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ctrl + q ：关闭当前选项卡或分屏
ctrl + e ：聚焦在第一个选项卡中
ctrl + , ：切换到上一个选项卡
ctrl + . ：切换到下一个选项卡
​
ctrl + w s ：拆分一个上下分屏
ctrl + w v ：拆分一个左右分屏
​
ctrl + w k ：将光标向上移动1屏
ctrl + w j ：将光标向下移动1屏
​
ctrl + w h ：将光标向左移动1屏
ctrl + w l ：将光标向右移动1屏
</code></pre></div></div>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="err">//</span><span class="w"> </span><span class="err">---</span><span class="w"> </span><span class="err">editor</span><span class="w"> </span><span class="err">command</span><span class="w"> </span><span class="err">---</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">关闭当前选项卡或分屏</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+q"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.closeActiveEditor"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">聚集在第一个选项卡中</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+e"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.focusFirstEditorGroup"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">切换到上一个选项卡</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+,"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.previousEditor"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">切换到下一个选项卡</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+."</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.nextEditor"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">拆分一个上下分屏</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+w s"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.splitEditorDown"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">拆分一个左右分屏</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+w v"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.splitEditor"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">将光标向上动</span><span class="mi">0</span><span class="err">屏</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+w k"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.focusAboveGroup"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">将光标向下动</span><span class="mi">0</span><span class="err">屏</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+w j"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.focusBelowGroup"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">将光标向左移动</span><span class="mi">0</span><span class="err">屏</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+w h"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.focusLeftGroup"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">将光标向右移动</span><span class="mi">0</span><span class="err">屏</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+w l"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.focusRightGroup"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<h4 id="316-代码编辑区命令定义">3.1.6 代码编辑区命令定义</h4>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ctrl + h ： 触发帮助提示
ctrl + j ： 触发参数提示
ctrl + k ： 触发建议提示
ctrl + n ： 移动到下一个建议
ctrl + p ： 移动到上一个建议
ctrl + <span class="se">\ </span>： 快速修正
tab      ： 选择下一个建议
enter    ： 选择当前建议

ctrl + alt + l ： 格式化代码（个人习惯）
 ​
ctrl + = ： 放大字体
ctrl + - ： 缩小字体

ctrl + [ ： 快速缩进
ctrl + ] ： 快速退格

// 编辑模式
alt + j  ： 光标上移
alt + k  ： 光标下移
alt + h  ： 光标左移
alt + l  ： 光标右移

alt + ,  ： Go backward
alt + .  ： Go forward
</code></pre></div></div>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="err">//</span><span class="w"> </span><span class="err">---</span><span class="w"> </span><span class="err">coding</span><span class="w"> </span><span class="err">command</span><span class="w">  </span><span class="err">---</span><span class="w"> 
    </span><span class="err">//</span><span class="w"> </span><span class="err">触发帮助提示</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+h"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editor.action.showHover"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">触发参数提示</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+j"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editor.action.triggerParameterHints"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorHasSignatureHelpProvider &amp;&amp; editorTextFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+j"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"closeParameterHints"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorFocus &amp;&amp; parameterHintsVisible"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">触发建议提示</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+k"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editor.action.triggerSuggest"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorHasCompletionItemProvider &amp;&amp; textInputFocus &amp;&amp; !editorReadonly"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+k"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"hideSuggestWidget"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"suggestWidgetVisible &amp;&amp; textInputFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">移动到下一个建议</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+n"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"selectNextSuggestion"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">移动到上一个建议</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+p"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"selectPrevSuggestion"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">快速修正</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+</span><span class="se">\\</span><span class="s2">"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editor.action.quickFix"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorHasCodeActionsProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly"</span><span class="p">,</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">格式化代码</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+alt+l"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editor.action.formatDocument"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorHasDocumentFormattingProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !inCompositeEditor"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">放大字体</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+="</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editor.action.fontZoomIn"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">缩小字体</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+-"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editor.action.fontZoomOut"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">快速缩进</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+["</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tab"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">快速退格</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+]"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"outdent"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">编辑模式</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">光标下、上、左、右移</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+j"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cursorDown"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+k"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cursorUp"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+h"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cursorLeft"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+l"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cursorRight"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">Go</span><span class="w"> </span><span class="err">back/forward</span><span class="w">
    </span><span class="p">{</span><span class="w"> 
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+,"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.navigateBack"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"canNavigateBack"</span><span class="w"> 
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w"> 
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+."</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.action.navigateForward"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"canNavigateForward"</span><span class="w"> 
    </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<h4 id="317-取消-vim-与-vscode-一些指令">3.1.7 取消 vim 与 vscode 一些指令</h4>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ctrl+a    : 全选， 非 INSERT 模式不生效
ctrl+c(v) : 复制（粘贴）， 非 INSERT 模式不生效
</code></pre></div></div>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="err">//</span><span class="w"> </span><span class="err">---</span><span class="w"> </span><span class="err">取消一些vim插件的额外功能</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+a"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_cmd+a"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;D-a&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+ctrl+down"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_cmd+alt+down"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+ctrl+up"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_cmd+alt+up"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; !inDebugRepl"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+c"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_cmd+c"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.overrideCopy &amp;&amp; vim.use&lt;D-c&gt; &amp;&amp; !inDebugRepl"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+v"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_cmd+v"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;D-v&gt; &amp;&amp; vim.mode == ''CommandlineInProgress' !inDebugRepl' || editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;D-v&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode == 'SearchInProgressMode'"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+d"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_cmd+d"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;D-d&gt; &amp;&amp; !inDebugRepl"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+left"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_cmd+left"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;D-left&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+right"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-extension.vim_cmd+right"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editorTextFocus &amp;&amp; vim.active &amp;&amp; vim.use&lt;D-right&gt; &amp;&amp; !inDebugRepl &amp;&amp; vim.mode != 'Insert'"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">---</span><span class="w"> </span><span class="err">取消或更改一些vscode键位</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">ctrl+a全选功能在非INSERT模式下不生效</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+a"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"editor.action.selectAll"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vim.mode != 'Normal' &amp;&amp; vim.mode != 'Visual' &amp;&amp; vim.mode != 'VisualLine' &amp;&amp; vim.mode != 'VisualBlock' &amp;&amp; vim.mode != 'CommandlineInProgress'"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+a"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-editor.action.selectAll"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">ctrl+c或者cmd+v功能在非INSERT模式下不生效</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+c"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-editor.action.clipboardCopyAction"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+v"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-editor.action.clipboardPasteAction"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+c"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-execCopy"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+c"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"execCopy"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vim.mode != 'Normal' &amp;&amp; vim.mode != 'Visual' &amp;&amp; vim.mode != 'VisualLine' &amp;&amp; vim.mode != 'VisualBlock' &amp;&amp; vim.mode != 'CommandlineInProgress'"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+v"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-execPaste"</span><span class="p">,</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+v"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"execPaste"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vim.mode != 'Normal' &amp;&amp; vim.mode != 'Visual' &amp;&amp; vim.mode != 'VisualLine' &amp;&amp; vim.mode != 'VisualBlock' &amp;&amp; vim.mode != 'CommandlineInProgress'"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<h2 id="4-资源管理配置">4. 资源管理配置</h2>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>j     ： 向下移动
k     ： 向上移动
space ： 打开文件或目录
​
新增：​
alt+x ： 折叠文件夹
i     ： 新增文件
o     ： 新增目录
r     ： 刷新目录
a     ： 重命名文件或目录
d     ： 删除文件或目录
x     ： 剪切文件或目录
y     ： 复制文件或目录
p     ： 粘贴文件或目录
</code></pre></div></div>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="err">//</span><span class="w"> </span><span class="err">---</span><span class="w"> </span><span class="err">资源管理器中对文件或目录的操作</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">折叠资源管理器文件夹</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+x"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.files.action.collapseExplorerFolders"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">" explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus "</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">新建文件</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"i"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"explorer.newFile"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">" explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus "</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">新建目录</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"o"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"explorer.newFolder"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">" explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus "</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">刷新资源管理器</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"r"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"workbench.files.action.refreshFilesExplorer"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">" explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus "</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">重命名文件或目录</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"a"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"renameFile"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">" explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus "</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">删除文件或目录</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"d"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"deleteFile"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">" explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus "</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">剪切文件或目录</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"x"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"filesExplorer.cut"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">复制文件或目录</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"y"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"filesExplorer.copy"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceIsRoot &amp;&amp; !inputFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">粘贴文件或目录</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"p"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"filesExplorer.paste"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"when"</span><span class="p">:</span><span class="w"> </span><span class="s2">"explorerViewletVisible &amp;&amp; filesExplorerFocus &amp;&amp; !explorerResourceReadonly &amp;&amp; !inputFocus"</span><span class="w">
    </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<h2 id="5-插件描述">5. 插件描述</h2>

<h3 id="51-输入法切换">5.1 输入法切换</h3>

<p>设置 NORMAL 模式下的输入法为英文， 方便进行 vim 指令操作。</p>

<ol>
  <li>
    <p>使用 Windows scoop 安装</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> scoop bucket add im-select https://github.com/daipeihust/im-select
 scoop <span class="nb">install </span>im-select
</code></pre></div>    </div>
  </li>
  <li>
    <p>切换至英文输入法获取输入法别名。</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> im-select.exe
 1033
</code></pre></div>    </div>
  </li>
  <li>
    <p>然后再到 settings.json 中加入以下配置项即可完成输入法在 INSERT 模式以及 NORMAL 模式下的自动切换。</p>

    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">     </span><span class="err">//</span><span class="w"> </span><span class="err">自动切换输入法</span><span class="w">
     </span><span class="nl">"vim.autoSwitchInputMethod.enable"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="err">,</span><span class="w">
     </span><span class="nl">"vim.autoSwitchInputMethod.defaultIM"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1033"</span><span class="err">,</span><span class="w">  </span><span class="err">//</span><span class="w"> </span><span class="err">这里输入你刚刚获得的英文输入法名称</span><span class="w">
     </span><span class="nl">"vim.autoSwitchInputMethod.obtainIMCmd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C:/Users/User/scoop/apps/im-select/current/im-select.exe"</span><span class="err">,</span><span class="w">
     </span><span class="nl">"vim.autoSwitchInputMethod.switchIMCmd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C:/Users/User/scoop/apps/im-select/current/im-select.exe {im}"</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ol>

<h3 id="52-内置插件">5.2 内置插件</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">vim-esaymotion</code>： 它的作用是通过以下的按键组合，你可以快速的定位到任何你想修改的行中。</p>

    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;leader&gt;&lt;leader&gt;</span>s<span class="nt">&lt;char&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">vim-surround</code>： 修改、或者删除符号。</p>

    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ds<span class="nt">&lt;existing&gt;</span>
  cs<span class="nt">&lt;existing&gt;&lt;desired&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">vim-commentary</code>： 该插件能够快速的利用键盘进行行或者块的注释。</p>

    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gcc ：行注释
  gCC ：块注释
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="53-快捷指令">5.3 快捷指令</h3>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gd ： 跳转到函数定义或引用处，搭配 ctrl+i/ctrl+o 查看源码很方便
gh ： 触发帮助提示
gb ： 开启多光标模式，选中和当前单词相同的单词
</code></pre></div></div>

<h2 id="6-参考">6. 参考</h2>

<ul>
  <li><a href="https://zhuanlan.zhihu.com/p/430603620#circle=on">vscode + vim 全键盘操作高效搭配方案， 云崖君</a></li>
</ul>]]></content><author><name>HangX-Ma</name></author><category term="Tool" /><category term="vscode" /><category term="vim" /><summary type="html"><![CDATA[参考了知乎博主 云崖君 的 vscode + vim 全键盘操作高效搭配方案， 仅用以记录个人使用配置， 内容较为简略。 配置文件可见 setting.json 以及 keybindings.json。]]></summary></entry><entry><title type="html">CSAPP - Data Lab</title><link href="https://hangx-ma.github.io/2023/03/07/csapp-datalab.html" rel="alternate" type="text/html" title="CSAPP - Data Lab" /><published>2023-03-07T00:00:00+08:00</published><updated>2023-03-07T00:00:00+08:00</updated><id>https://hangx-ma.github.io/2023/03/07/csapp-datalab</id><content type="html" xml:base="https://hangx-ma.github.io/2023/03/07/csapp-datalab.html"><![CDATA[<p>Computer Systems: A Programmer’s Perspective, 3/E (CS:APP3e) – Data Lab， 实现源码可从 <a href="https://github.com/HangX-Ma/csapp-2015">Github</a> 获取。
<!--more--></p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Progress and timeline <font color="#4682B4">[1/14]</font></li>
</ul>

<h2 id="prerequisite">Prerequisite</h2>

<ul>
  <li>neovim, NvChad</li>
  <li>WSL2, Ubuntu-20.04</li>
  <li>gcc, gcc-multlib, gdb, build-essential, make</li>
</ul>

<blockquote>
  <p>64 位机器编译时， 由于库不支持 32 位代码编译， 因而需要下载 <code class="language-plaintext highlighter-rouge">gcc-multilib</code>。</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>build-essential make
<span class="nb">sudo </span>apt <span class="nb">install </span>gcc gcc-multilib gdb
</code></pre></div></div>

<h2 id="题解与分析">题解与分析</h2>

<h3 id="1-bitxor">1. bitXor</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
 * bitXor - x^y using only ~ and &amp; 
 *   Example: bitXor(4, 5) = 1
 *   Legal ops: ~ &amp;
 *   Max ops: 14
 *   Rating: 1
 */</span>
<span class="kt">int</span> <span class="nf">bitXor</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="o">~</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">y</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">y</span><span class="p">;</span>
  <span class="k">return</span> <span class="o">~</span><span class="p">(</span><span class="o">~</span><span class="n">a</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">b</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>参考数字逻辑电路部分的异或门， 逻辑表达式为 \(A \oplus B = \overline{A}B + A\overline{B}\)， 需要对这部分进行变式推导， 主要应用了反演律（摩根定律） \(\overline{A}B + A\overline{B} = \overline{\overline{\overline{A}B + A\overline{B}}} = \overline{\overline{\overline{A}B} \bullet \overline{A\overline{B}}}\)。 当然更简单的是根据同或门取反实现。</p>

<h3 id="2-tmin">2. tmin</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
 * tmin - return minimum two's complement integer 
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 4
 *   Rating: 1
 */</span>
<span class="kt">int</span> <span class="nf">tmin</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>32 位机最小的补码是 <code class="language-plaintext highlighter-rouge">0x80000000</code>， 既然能用 <code class="language-plaintext highlighter-rouge">&lt;&lt;</code> 操作符就直接向左移位 31 位。</p>

<h3 id="3-istmax">3. isTmax</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * isTmax - returns 1 if x is the maximum, two's complement number,
 *     and 0 otherwise 
 *   Legal ops: ! ~ &amp; ^ | +
 *   Max ops: 10
 *   Rating: 1
 */</span>
<span class="kt">int</span> <span class="nf">isTmax</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">!!</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">!</span><span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="n">x</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>由于不能使用移位操作符， 需要用替代办法实现。 以 4 位 $TMax_4 = 0111_2$ 为例， $TMax_4 + 1 = 1000_2$， 该数取反也会得到 $TMax_4$， 那么以 <code class="language-plaintext highlighter-rouge">!（~(x + 1) ^ x)</code> 就可以满足要求。 但是用 <code class="language-plaintext highlighter-rouge">btest</code> 检查的时候却报错如下， 发现 <code class="language-plaintext highlighter-rouge">-1</code> 这个例外同样满足上式。 但发现存在 <code class="language-plaintext highlighter-rouge">-1 + 1 = 0</code> 这个特殊性质， 故而可以借此进行两数的区分， <code class="language-plaintext highlighter-rouge">!(x + 1)</code> 若为零则说明输入 <code class="language-plaintext highlighter-rouge">x</code> 是除 <code class="language-plaintext highlighter-rouge">-1</code> 以外的数。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ERROR: Test isTmax<span class="o">(</span><span class="nt">-1</span><span class="o">[</span>0xffffffff]<span class="o">)</span> failed...
...Gives 1[0x1]. Should be 0[0x0]
</code></pre></div></div>

<h3 id="4-alloddbits">4. allOddBits</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
 * allOddBits - return 1 if all odd-numbered bits in word set to 1
 *   where bits are numbered from 0 (least significant) to 31 (most significant)
 *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 12
 *   Rating: 2
 */</span>
<span class="kt">int</span> <span class="nf">allOddBits</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">mask</span> <span class="o">=</span> <span class="mh">0xAA</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">mask_all</span> <span class="o">=</span> <span class="p">(</span><span class="n">mask</span> <span class="o">|</span> <span class="p">(</span><span class="n">mask</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">mask</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">mask</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">));</span>
  <span class="n">x</span> <span class="o">&amp;=</span> <span class="n">mask_all</span><span class="p">;</span>
  <span class="n">x</span> <span class="o">^=</span> <span class="n">mask_all</span><span class="p">;</span>
  <span class="k">return</span> <span class="o">!</span><span class="n">x</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>属实有点被坑到， 说是要求不能用超过 8 位的常量， 但实际上可以通过这样取巧的方式定义一个， 具体实现也比较简单， 用掩码解决。</p>

<h3 id="5-negate">5. negate</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
 * negate - return -x 
 *   Example: negate(1) = -1.
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 5
 *   Rating: 2
 */</span>
<span class="kt">int</span> <span class="nf">negate</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">~</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">x + ~x = -1</code> 因而 <code class="language-plaintext highlighter-rouge">-x = ~x + 1</code>， 需注意补码， 反码， 原码之间的关系。</p>

<h3 id="6-isasciidigit">6. isAsciiDigit</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
 * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9')
 *   Example: isAsciiDigit(0x35) = 1.
 *            isAsciiDigit(0x3a) = 0.
 *            isAsciiDigit(0x05) = 0.
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 15
 *   Rating: 3
 */</span>
<span class="kt">int</span> <span class="nf">isAsciiDigit</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">hbits_fit</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0x3</span><span class="p">;</span> 
  <span class="kt">int</span> <span class="n">lbits_fit</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xF</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="o">~</span><span class="mh">0xA</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span><span class="p">);</span> 

  <span class="k">return</span> <span class="p">(</span><span class="o">!</span><span class="n">hbits_fit</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">!!</span><span class="n">lbits_fit</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">0x30 = 0011 0000</code> 以及 <code class="language-plaintext highlighter-rouge">0x39 = 0011 1001</code> 可以看出 <code class="language-plaintext highlighter-rouge">0011</code> 也就是 <code class="language-plaintext highlighter-rouge">0x3_</code> 部分对于二者而言是一致的， 因而 <code class="language-plaintext highlighter-rouge">x &gt;&gt; 4 == 3</code> 是首要的判断条件。 另外就是保证末尾 4 位位于 0 ~ 9 之间即可。 那么首先通过 <code class="language-plaintext highlighter-rouge">&amp; 0xF</code> 运算读取最后 4 位的数据， 根据前面的 <code class="language-plaintext highlighter-rouge">negate</code> 实现方式使 <code class="language-plaintext highlighter-rouge">0xA</code> 成为负数方便做差， 若结果是负数则说明尾数在范围之内。</p>

<h3 id="7-conditional">7. conditional</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
 * conditional - same as x ? y : z 
 *   Example: conditional(2,4,5) = 4
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 16
 *   Rating: 3
 */</span>
<span class="kt">int</span> <span class="nf">conditional</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">z</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">ifTrue</span> <span class="o">=</span> <span class="o">!!</span><span class="n">x</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">cond</span> <span class="o">=</span> <span class="o">~</span><span class="n">ifTrue</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> 
  <span class="kt">int</span> <span class="n">neg_y</span> <span class="o">=</span> <span class="o">~</span><span class="p">(</span><span class="n">y</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">cond</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">neg_z</span> <span class="o">=</span> <span class="o">~</span><span class="p">(</span><span class="n">z</span> <span class="o">&amp;</span> <span class="n">cond</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">y</span> <span class="o">+</span> <span class="n">neg_y</span> <span class="o">+</span> <span class="n">z</span> <span class="o">+</span> <span class="n">neg_z</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>判断 <code class="language-plaintext highlighter-rouge">x</code> 的属性是第一优先级， <code class="language-plaintext highlighter-rouge">!!x</code> 可以将其转换为 0 和 1 两个数。 这步判断也比较关键， 若为 1 则返回 <code class="language-plaintext highlighter-rouge">y</code> 反之则返回 <code class="language-plaintext highlighter-rouge">z</code>， 故而需要利用对 <code class="language-plaintext highlighter-rouge">x</code> 的判断结果。</p>

<ul>
  <li>需要依据判断结果消除 <code class="language-plaintext highlighter-rouge">y</code> 或 <code class="language-plaintext highlighter-rouge">z</code> 对结果的影响。</li>
  <li><code class="language-plaintext highlighter-rouge">-y</code> 和 <code class="language-plaintext highlighter-rouge">-z</code> 与前述结果进行条件加和可以达到目的。</li>
</ul>

<p>可知对 0 和 1 分别取反可以得到 <code class="language-plaintext highlighter-rouge">0xFFFFFFFF</code> 以及 <code class="language-plaintext highlighter-rouge">0xFFFFFFFE</code>， 若再加上 1 则可以得到 <code class="language-plaintext highlighter-rouge">0x00000000</code> 与 <code class="language-plaintext highlighter-rouge">0xFFFFFFFF</code>， 这个结果正是进行条件选择的依据。 利用 <code class="language-plaintext highlighter-rouge">&amp;</code> 操作符即可选择 <code class="language-plaintext highlighter-rouge">-y</code> 与 <code class="language-plaintext highlighter-rouge">-z</code> 之一为 0， 则该数对后续返回值不会造成影响。</p>

<h3 id="8-islessorequal">8. isLessOrEqual</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
 * isLessOrEqual - if x &lt;= y  then return 1, else return 0 
 *   Example: isLessOrEqual(4,5) = 1.
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 24
 *   Rating: 3
 */</span>
<span class="kt">int</span> <span class="nf">isLessOrEqual</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">neg_x</span> <span class="o">=</span> <span class="o">~</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">isLess</span> <span class="o">=</span> <span class="o">!</span><span class="p">((</span><span class="n">neg_x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">);</span>
  <span class="kt">int</span> <span class="n">isEqual</span> <span class="o">=</span> <span class="o">!</span><span class="p">(</span><span class="n">x</span> <span class="o">^</span> <span class="n">y</span><span class="p">);</span>
  <span class="c1">// we don't know right shift is logical or arithmetic.</span>
  <span class="kt">int</span> <span class="n">sign_x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x01</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">sign_y</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x01</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">negxy</span> <span class="o">=</span> <span class="n">sign_x</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">sign_y</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">negyx</span> <span class="o">=</span> <span class="o">~</span><span class="n">sign_x</span> <span class="o">&amp;</span> <span class="n">sign_y</span><span class="p">;</span>

  <span class="k">return</span> <span class="n">negxy</span> <span class="o">|</span> <span class="p">(</span><span class="o">!</span><span class="n">negyx</span> <span class="o">&amp;</span> <span class="n">isLess</span><span class="p">)</span> <span class="o">|</span> <span class="n">isEqual</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>可以容易得到 <code class="language-plaintext highlighter-rouge">-x</code> 以及关于 <code class="language-plaintext highlighter-rouge">-x + y</code> 的比较关系， 也就是上式中的 <code class="language-plaintext highlighter-rouge">neg_x</code> 和 <code class="language-plaintext highlighter-rouge">isLess</code>。</p>

<ul>
  <li>若 <code class="language-plaintext highlighter-rouge">x</code> 为负数， 而 <code class="language-plaintext highlighter-rouge">y</code> 为正数， 显然 <code class="language-plaintext highlighter-rouge">x &lt; y</code>。 但在 <code class="language-plaintext highlighter-rouge">isLess</code> 的判断式中可能会产生溢出导致相反的结果。 那么索性将这部分的判断交由两数的符号而不使用 <code class="language-plaintext highlighter-rouge">isLess</code> 判断式。 因而当 <code class="language-plaintext highlighter-rouge">negxy</code> 为 <code class="language-plaintext highlighter-rouge">1</code> 就无需判断后续的表达式。</li>
  <li>若 <code class="language-plaintext highlighter-rouge">x</code> 为正数， 而 <code class="language-plaintext highlighter-rouge">y</code> 为负数， 显然 <code class="language-plaintext highlighter-rouge">x &gt; y</code>， 那么只需要返回 <code class="language-plaintext highlighter-rouge">!negyx</code> 就可避免溢出。</li>
  <li><code class="language-plaintext highlighter-rouge">x</code> 与 <code class="language-plaintext highlighter-rouge">y</code> 同号时交予 <code class="language-plaintext highlighter-rouge">isLess</code> 判断即可， 但这个判断是与 <code class="language-plaintext highlighter-rouge">negyx</code> 或者 <code class="language-plaintext highlighter-rouge">negxy</code> 相关联的， 因而需要选其一进行相与操作， 否则前两点叙述中对 <em>后续部分无需判断</em> 的叙述就不成立了。</li>
  <li>另外额外考虑两者相等， 通过异或操作符即可判断。</li>
</ul>

<h3 id="9-logicalneg">9. logicalNeg</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
 * logicalNeg - implement the ! operator, using all of 
 *              the legal operators except !
 *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1
 *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 12
 *   Rating: 4 
 */</span>
<span class="kt">int</span> <span class="nf">logicalNeg</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">ifzero</span> <span class="o">=</span> <span class="p">(</span><span class="o">~</span><span class="p">((</span><span class="o">~</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x01</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x01</span><span class="p">);</span> 
  <span class="k">return</span> <span class="n">ifzero</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>要求除了 <code class="language-plaintext highlighter-rouge">!</code> 操作符外， 使用任何其他的操作符来实现 <code class="language-plaintext highlighter-rouge">!</code> 的效果。 <code class="language-plaintext highlighter-rouge">0</code> 这个数取负仍然是其本身， 因而可以利用这个特点， 对符号位进行判断。 由于我们需要在输入为 <code class="language-plaintext highlighter-rouge">0</code> 时返回 <code class="language-plaintext highlighter-rouge">1</code>， 以及输入非零时返回 <code class="language-plaintext highlighter-rouge">0</code>， 因而对所获取的符号位需要再取反。 除了 <code class="language-plaintext highlighter-rouge">0</code> 以外的数其负数和正数的符号必然相异， 据此即可得到结果。</p>

<h3 id="10-howmanybits">10. howManyBits</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 *  Examples: howManyBits(12) = 5
 *            howManyBits(298) = 10
 *            howManyBits(-5) = 4
 *            howManyBits(0)  = 1
 *            howManyBits(-1) = 1
 *            howManyBits(0x80000000) = 32
 */</span>
</code></pre></div></div>

<p>需要分析 example 中所表达的意思， 对于正数而言其实不难推导， <code class="language-plaintext highlighter-rouge">12 = 1100</code> 但返回的位数为 5， 说明对于正数其实是加上了符号位， 那么只需要找到最高位的 1 即可知道该数用补码表示的位数为 <code class="language-plaintext highlighter-rouge">n+1</code> 位， 其中 <code class="language-plaintext highlighter-rouge">n（1~31）</code> 为 1 所在位置。</p>

<p>但是负数部分着实有些迷惑， 看来看去都像是取负之后的结果。 比如 <code class="language-plaintext highlighter-rouge">-5</code> 取负后为 <code class="language-plaintext highlighter-rouge">5 = 0101</code> 加上符号位正好结果为 4。 但是 <code class="language-plaintext highlighter-rouge">-1</code> 和 <code class="language-plaintext highlighter-rouge">0</code> 的结果都为 1 说明对于这两个特殊数字而言符号位是不需要加上的， 那么同理若输入为 <code class="language-plaintext highlighter-rouge">1</code> 也不需要。 （在具体实现中满足了这点要求）</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* howManyBits - return the minimum number of bits required to represent x in
 *             two's complement
 *  Examples: howManyBits(12) = 5
 *            howManyBits(298) = 10
 *            howManyBits(-5) = 4
 *            howManyBits(0)  = 1
 *            howManyBits(-1) = 1
 *            howManyBits(0x80000000) = 32
 *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *  Max ops: 90
 *  Rating: 4
 */</span>
<span class="kt">int</span> <span class="nf">howManyBits</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">div16</span><span class="p">,</span> <span class="n">div8</span><span class="p">,</span> <span class="n">div4</span><span class="p">,</span> <span class="n">div2</span><span class="p">,</span> <span class="n">div1</span><span class="p">,</span> <span class="n">remain</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">sign</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">;</span>
  <span class="cm">/* get positive x */</span>
  <span class="n">x</span> <span class="o">=</span> <span class="p">((</span><span class="o">~</span><span class="n">sign</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">sign</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">~</span><span class="n">x</span><span class="p">));</span>
  <span class="cm">/* some bits set among high 16 bits or not */</span>
  <span class="n">div16</span> <span class="o">=</span>  <span class="o">!!</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">;</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">div16</span><span class="p">;</span>
  <span class="n">div8</span> <span class="o">=</span>  <span class="o">!!</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">;</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">div8</span><span class="p">;</span>
  <span class="n">div4</span> <span class="o">=</span>  <span class="o">!!</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">;</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">div4</span><span class="p">;</span>
  <span class="n">div2</span> <span class="o">=</span>  <span class="o">!!</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">div2</span><span class="p">;</span>
  <span class="n">div1</span> <span class="o">=</span> <span class="o">!!</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">div1</span><span class="p">;</span>
  <span class="n">remain</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span>  <span class="n">div16</span> <span class="o">+</span> <span class="n">div8</span> <span class="o">+</span> <span class="n">div4</span> <span class="o">+</span> <span class="n">div2</span> <span class="o">+</span> <span class="n">div1</span> <span class="o">+</span> <span class="n">remain</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>利用分治法， 这部分借鉴了网上的代码。 例如 <code class="language-plaintext highlighter-rouge">div16</code> 实际上就是判断高 16 位是否存在为 1 的 bit， 若存在则至少有 16 位， 那么接着在高 16 位进一步分治。 否则， 在 [16， 8] 之间进行 8 位的分治依次类推。 最差的情况是 [32, 16], [16, 8], [8, 4], [4, 2], [2, 1] 这些区间内都需要进行判断。</p>

<h3 id="11-floatscale2">11. floatScale2</h3>

<div align="center">
    <img src="/norobots/images/2023-03-07-csapp-datalab/float32.png" alt="Float32 format, CSAPP, Figure 2.32" width="600" />
    <br />
    <font size="2" color="#999"><u>Float32 format, CSAPP, Figure 2.32</u></font>
</div>

<div align="center">
    <img src="/norobots/images/2023-03-07-csapp-datalab/float32_categories.png" alt="Categories of single-precision floating-point values, Figure 2.33" width="600" />
    <br />
    <font size="2" color="#999"><u>Categories of single-precision floating-point values, Figure 2.33</u></font>
</div>

<p>根据书中所描述的 float32 的定义， 需要将输入的 <code class="language-plaintext highlighter-rouge">uint32</code> 的数拆分成符号位 <code class="language-plaintext highlighter-rouge">S(31)</code>， 指数位 <code class="language-plaintext highlighter-rouge">exp(23-30)</code>， 以及小数位 <code class="language-plaintext highlighter-rouge">frac(0-22)</code> 并根据这些数的值区分 Normalized， Denormalized, 以及特殊类型 Infinity, NaN。</p>

\[V = (-1)^{S} \times M \times 2^{E}\]

<p>对于此道题而言， 输入 <code class="language-plaintext highlighter-rouge">uf</code> 需要返回 <code class="language-plaintext highlighter-rouge">2 * uf</code>， 根据上述公式， <code class="language-plaintext highlighter-rouge">E</code> 的值应当加 1。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
 * floatScale2 - Return bit-level equivalent of expression 2*f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representation of
 *   single-precision floating point values.
 *   When argument is NaN, return argument
 *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while
 *   Max ops: 30
 *   Rating: 4
 */</span>
<span class="kt">unsigned</span> <span class="nf">floatScale2</span><span class="p">(</span><span class="kt">unsigned</span> <span class="n">uf</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">unsigned</span> <span class="n">sign</span> <span class="o">=</span> <span class="n">uf</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mh">0x80000000</span><span class="p">);</span>
  <span class="kt">unsigned</span> <span class="n">exp</span> <span class="o">=</span> <span class="n">uf</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mh">0x7F800000</span><span class="p">);</span> <span class="c1">// 8 bits</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">exp</span> <span class="o">^</span> <span class="mh">0x7F800000</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">uf</span><span class="p">;</span>
  <span class="p">}</span> <span class="c1">// NaN or Infinity </span>

  <span class="n">exp</span> <span class="o">=</span> <span class="n">exp</span> <span class="o">&gt;&gt;</span> <span class="mi">23</span><span class="p">;</span> <span class="c1">// acquire exp</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">exp</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">uf</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="n">sign</span><span class="p">;</span> <span class="c1">// only M and S remain</span>
  <span class="p">}</span>
  <span class="n">exp</span> <span class="o">=</span> <span class="p">((</span><span class="n">exp</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">23</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mh">0x7F800000</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">(</span><span class="n">uf</span> <span class="o">&amp;</span> <span class="o">~</span><span class="mh">0x7F800000</span><span class="p">)</span> <span class="o">|</span> <span class="n">exp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="12-floatfloat2int">12. floatFloat2Int</h3>

<p>对尾数 M 部分的作用以及实现逻辑的理解有缺失， 查阅资料后发现尾数的 M 实际隐藏了一个 1。 严格来说尾数应当是 24 位， $2^0 + 2^{-1} + 2^{-2} + … + 2^{-23}$， 其实际表示的范围为 $[1, 2 - 2^{-23}]$。 （本质上 Normalized 和 Denormalized 是一致的， 书上列了一张表显示二者之间是可以精确衔接的。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
 * floatFloat2Int - Return bit-level equivalent of expression (int) f
 *   for floating point argument f.
 *   Argument is passed as unsigned int, but
 *   it is to be interpreted as the bit-level representation of a
 *   single-precision floating point value.
 *   Anything out of range (including NaN and infinity) should return
 *   0x80000000u.
 *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while
 *   Max ops: 30
 *   Rating: 4
 */</span>
<span class="kt">int</span> <span class="nf">floatFloat2Int</span><span class="p">(</span><span class="kt">unsigned</span> <span class="n">uf</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// fraction should be cut off </span>
  <span class="kt">int</span> <span class="n">exponent</span><span class="p">;</span>
  <span class="kt">unsigned</span> <span class="n">bias</span> <span class="o">=</span> <span class="mi">127</span><span class="p">;</span>
  <span class="kt">unsigned</span> <span class="n">sign</span> <span class="o">=</span> <span class="n">uf</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mh">0x80000000</span><span class="p">);</span> <span class="c1">// 1 bit</span>
  <span class="kt">unsigned</span> <span class="n">exp</span> <span class="o">=</span> <span class="n">uf</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mh">0x7F800000</span><span class="p">);</span>  <span class="c1">// 8 bits</span>
  <span class="kt">unsigned</span> <span class="n">frac</span> <span class="o">=</span> <span class="n">uf</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mh">0x7FFFFF</span><span class="p">);</span>   <span class="c1">// 23 bits</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">exp</span> <span class="o">^</span> <span class="mh">0x7F800000</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mh">0x80000000u</span><span class="p">;</span>
  <span class="p">}</span> <span class="c1">// NaN or Infinity </span>

  <span class="n">exp</span> <span class="o">=</span> <span class="n">exp</span> <span class="o">&gt;&gt;</span> <span class="mi">23</span><span class="p">;</span> <span class="c1">// get exponent value</span>
  <span class="n">exponent</span> <span class="o">=</span> <span class="n">exp</span> <span class="o">-</span> <span class="n">bias</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">exponent</span> <span class="o">&gt;</span> <span class="mi">31</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mh">0x80000000u</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">exponent</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
 
  <span class="c1">// give frac the hiden main part</span>
  <span class="n">frac</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">23</span><span class="p">;</span>
  <span class="c1">// fill the gap and move the binary point</span>
  <span class="n">frac</span> <span class="o">=</span> <span class="p">(</span><span class="n">frac</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">31</span> <span class="o">-</span> <span class="n">exponent</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">((</span><span class="o">!!</span><span class="n">sign</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">frac</span> <span class="o">=</span> <span class="o">~</span><span class="n">frac</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">frac</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>另外在计算的时候需要考虑 <code class="language-plaintext highlighter-rouge">bias</code> 对的影响， 32 位机的 <code class="language-plaintext highlighter-rouge">bias</code> 依照公式应当为 $2^k - 1 = 127$， 其中 <code class="language-plaintext highlighter-rouge">k</code> 为 <code class="language-plaintext highlighter-rouge">exp</code> 部分的位数。</p>

<p>由于 exponent 部分的范围是 $[-127, 128]$， 小于零的 exponent 最终截断后的结果为 0， 这是因为尾数 M 部分的范围是 $[1, 2 - 2^{23}]$， 这是一个介于 1 和 2 之间的数， 只要 $exponent &lt;0, exponent \in \scriptstyle{Z}$ 则必有尾数小于 1 成立。 而对于 exponent 大于 31 的情况则以溢出进行处理。</p>

<p>有一处报错值得注意， 当时对于符号部分 <code class="language-plaintext highlighter-rouge">sign</code> 我是与 <code class="language-plaintext highlighter-rouge">frac</code> 做了 <code class="language-plaintext highlighter-rouge">&amp;</code> 操作， 这其实是对浮点数和整数关系的混淆。 浮点数的 <code class="language-plaintext highlighter-rouge">sign</code> 是一种标志， 说明当前的这个浮点数为负数， 因而在转换过程中也应当将其作为符号处理。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ERROR: Test floatFloat2Int<span class="o">(</span><span class="nt">-1082130432</span><span class="o">[</span>0xbf800000]<span class="o">)</span> failed
...
...Gives <span class="nt">-2147483647</span><span class="o">[</span>0x80000001]. Should be <span class="nt">-1</span><span class="o">[</span>0xffffffff]
</code></pre></div></div>

<h3 id="13-floatpower2">13. floatPower2</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
 * floatPower2 - Return bit-level equivalent of the expression 2.0^x
 *   (2.0 raised to the power x) for any 32-bit integer x.
 *
 *   The unsigned value that is returned should have the identical bit
 *   representation as the single-precision floating-point number 2.0^x.
 *   If the result is too small to be represented as a denorm, return
 *   0. If too large, return +INF.
 * 
 *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while 
 *   Max ops: 30 
 *   Rating: 4
 */</span>
<span class="kt">unsigned</span> <span class="nf">floatPower2</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">exp</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">bias</span> <span class="o">=</span> <span class="mi">127</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mh">0x7F800000</span><span class="p">;</span> <span class="c1">// +INF(S = 0, exp = 0xFF)</span>
  <span class="p">}</span>
  
  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">127</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// exp = E + bias</span>
  <span class="n">exp</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">bias</span><span class="p">;</span> 
  <span class="k">return</span> <span class="n">exp</span> <span class="o">&lt;&lt;</span> <span class="mi">23</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>最后一题反倒是容易许多， 需要留意 <code class="language-plaintext highlighter-rouge">E</code> 指数部分的范围， 输入的 <code class="language-plaintext highlighter-rouge">x</code> 实际上就是这个指数， 之后只需要将 <code class="language-plaintext highlighter-rouge">exp</code> 通过公式计算出来即可。</p>

<h2 id="总结">总结</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># dlc checker</span>
dlc:bits.c:149:bitXor: 8 operators
dlc:bits.c:158:tmin: 1 operators
dlc:bits.c:169:isTmax: 8 operators
dlc:bits.c:184:allOddBits: 9 operators
dlc:bits.c:194:negate: 2 operators
dlc:bits.c:210:isAsciiDigit: 12 operators
dlc:bits.c:224:conditional: 14 operators
dlc:bits.c:243:isLessOrEqual: 19 operators
dlc:bits.c:256:logicalNeg: 9 operators
dlc:bits.c:287:howManyBits: 36 operators
dlc:bits.c:316:floatScale2: 14 operators
dlc:bits.c:360:floatFloat2Int: 18 operators
dlc:bits.c:388:floatPower2: 5 operators
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># btest checker</span>
Score   Rating  Errors  Function
 1      1       0       bitXor
 1      1       0       tmin
 1      1       0       isTmax
 2      2       0       allOddBits
 2      2       0       negate
 3      3       0       isAsciiDigit
 3      3       0       conditional
 3      3       0       isLessOrEqual
 4      4       0       logicalNeg
 4      4       0       howManyBits
 4      4       0       floatScale2
 4      4       0       floatFloat2Int
 4      4       0       floatPower2
Total points: 36/36
</code></pre></div></div>

<p>整整做了一天半， 还有一些题目参考了别人的思路， 不然想破脑袋也难解决， 在做 Lab 之前还以为这种基础性框架性的书给的 Lab 应该不算太难， 结果是眼高手低。</p>

<p>在做 Lab 的时候也是对之前知识的回顾与查漏， 像浮点数这块我理解的就不是特别透彻， 结果就在做 Lab 时卡住了， 基础知识掌握不牢后续遇到问题就是灾难。 总的来说通过 datalab 我对整数， 浮点数的概念有了比较清晰的理解和认识， 也发现神奇的操作数能在限制极多的情况下也可以实现让人意想不到的功能。 非常建议非 CS 科班但有代码工作需求的同学学习， 即便到研究生阶段也有大用处。</p>

<blockquote>
  <p>我此前发现过一个非常有趣的网站也是关于 Bit 运算的， 在这里分享一下， <a href="http://graphics.stanford.edu/~seander/bithacks.html" class="button button--outline-primary button--pill">Bit Twiddling Hacks</a>。 CSAPP 有时间还是得多翻翻~</p>
</blockquote>

<h2 id="website">Website</h2>

<ul>
  <li><a href="http://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/schedule.html">15-213/18-213/15-513: Intro to Computer Systems (ICS)</a></li>
  <li><a href="http://csapp.cs.cmu.edu/3e/labs.html">Computer Systems: A Programmer’s Perspective, 3/E (CS:APP3e) - Lab Assignments</a></li>
  <li><a href="https://github.com/HangX-Ma/csapp-2015">Github repository: csapp-2015</a></li>
</ul>]]></content><author><name>HangX-Ma</name></author><category term="Course" /><category term="CSAPP" /><summary type="html"><![CDATA[Computer Systems: A Programmer’s Perspective, 3/E (CS:APP3e) – Data Lab， 实现源码可从 Github 获取。]]></summary></entry><entry><title type="html">U-Boot 基础概念与学习分享</title><link href="https://hangx-ma.github.io/2023/02/27/uboot-concept.html" rel="alternate" type="text/html" title="U-Boot 基础概念与学习分享" /><published>2023-02-27T00:00:00+08:00</published><updated>2023-02-27T00:00:00+08:00</updated><id>https://hangx-ma.github.io/2023/02/27/uboot-concept</id><content type="html" xml:base="https://hangx-ma.github.io/2023/02/27/uboot-concept.html"><![CDATA[<ul>
  <li>Board: rockchip-px30, armv8, Cortex-A35</li>
  <li>U-Boot: <a href="https://github.com/rockchip-linux/u-boot">rockchip-linux/u-boot</a>, branch next-dev</li>
  <li>Tools: VScode, Exuberant CTags</li>
</ul>

<h2 id="1-前言">1. 前言</h2>

<p>学习 u-boot 启动流程有些时日了， 虽然看了大量的文章以及在此期间仔细阅读源码， 但是仍感觉很多知识点掌握不深刻容易遗忘，不如在写博文的时候重溯整个流程， 也分享关于 u-boot 的学习方式。</p>

<h2 id="2-学习路线">2. 学习路线</h2>

<p>一般来说芯片公司会提供相关的手册介绍各个组件， 这对了解特定型号的开发板是很有效的， 但不适合初学者进行系统的学习， 建立全局概念应当是第一位的。 学习 u-boot 应当对以下几个方面有所了解：</p>

<ul>
  <li>ARM Assembly， 推荐 <em>Kyle Baldwin</em> 的 <em>ARM Assembly By Example</em>， 我自己在 <a href="https://github.com/HangX-Ma/ARM-Assembly-By-Example">github</a> 上也实现了相关的 lab。</li>
  <li>Device Tree， <a href="http://devicetree.org/">The DeviceTree Specification</a> 结合具体的 dts/dtsi 文件阅读学习。</li>
  <li>Linker Script， <a href="https://www.gnu.org/software/binutils/">GNU Binutils</a> 官方的ld文档合具体的lds文件进行阅读学习， 结合 <em>程序员的自我修养–链接装载与库</em> 这本书建立相关概念。</li>
  <li>Kconfig, <a href="https://www.kernel.org/doc/html/latest/kbuild/kconfig-language.html">Kconfig Language</a> 同样用在了 u-boot 中需要对其有一定的了解。</li>
</ul>

<p>如果对 DM(Driver Model) 有兴趣， 可以阅读 <a href="https://lwn.net/Kernel/LDD3/">Linux Device Driver, Third Edition</a>，但具备以上几块知识已经足够理解 u-boot 启动流程。 Das U-Boot 提供的文档以及 u-boot 源码中提供的 <code class="language-plaintext highlighter-rouge">README</code> 这类文档不需要仔细读完， 这些仅供学习参考， 但 <a href="https://elinux.org/Boot_Loaders#U-Boot">elinux_talks</a> 这部分资源也值得查阅。</p>

<p>全局概念非常重要， 先啃源码建立相关概念， 带着问题探究细节会事半功倍。</p>

<h2 id="3-u-boot-框架与启动阶段">3. U-Boot 框架与启动阶段</h2>

<h3 id="31-u-boot-架构分析">3.1 U-Boot 架构分析</h3>

<p>u-boot 的开发者在<a href="https://github.com/rockchip-linux/u-boot/blob/next-dev/README#L132-L167">开发文档</a>中描述目录的层次结构， 但缺少更为宏观的概括。 以 rockchip-px30 为例， 其在 u-boot 中的文件可被划归为以下几类。以CPU，ARCH，Board 三级对文件进行划分可以帮助我们在配置新板时有更清晰的规划。 <em>Quentin Schulz</em> 在 2017 年的嵌入式 linux 欧洲会议上的演讲 <em><a href="https://elinux.org/images/2/2a/Schulz-how-to-support-new-board-u-boot-linux.pdf">Porting U-Boot and Linux on new ARM boards: a step-by-step guide</a></em> 则具体介绍了详细的实施步骤。</p>

<blockquote>
  <p>CPU (armv8), ARCH (arm), Board(px30)</p>
</blockquote>

<ul>
  <li>CPU 层级依赖文件
    <ul>
      <li><code class="language-plaintext highlighter-rouge">arch/arm/cpu/armv8/*c;*S;*lds</code></li>
      <li><code class="language-plaintext highlighter-rouge">arch/arm/include/asm/armv8/*h</code></li>
    </ul>
  </li>
  <li>ARCH(arm) 层级依赖文件
    <ul>
      <li><code class="language-plaintext highlighter-rouge">arch/arm/lib/*c;*S;*lds</code></li>
      <li><code class="language-plaintext highlighter-rouge">arch/arm/include/asm/*h;*S</code></li>
    </ul>
  </li>
  <li>Board 层级依赖文件
    <ul>
      <li><code class="language-plaintext highlighter-rouge">board/rockchip/evb_px30/*c</code></li>
      <li><code class="language-plaintext highlighter-rouge">arch/arm/mach-rockchip/px30/*c</code></li>
    </ul>
  </li>
  <li>Board 层级配置文件
    <ul>
      <li><code class="language-plaintext highlighter-rouge">arch/arm/include/asm/arch-rockchip/*h;*S</code></li>
      <li><code class="language-plaintext highlighter-rouge">include/rockchip/*h</code></li>
      <li><code class="language-plaintext highlighter-rouge">include/px30_common.h;evb_px30.h</code></li>
    </ul>
  </li>
  <li>Board 层级非依赖文件
    <ul>
      <li>common(cmd, flash, env, usb, …), disk(partition)</li>
      <li>drivers, fs, net, lib</li>
    </ul>
  </li>
</ul>

<div align="center">
    <img src="/norobots/images/2023-02-27-uboot-concept/hierarchy.png" alt="U-Boot Hierarchy, HangX-Ma" width="400" />
    <br />
    <font size="2" color="#999"><u>U-Boot Hierarchy, HangX-Ma</u></font>
</div>

<p>u-boot 的初始化过程就是 CPU $\rightarrow$ ARCH $\rightarrow$ Board 的过程， 但并不严格划归， ARCH部分的通用代码会调用 Board 相关的接口。 在 <a href="http://www.wowotech.net/x_project/bubblegum_uboot_porting.html">wowo</a> 的文章中提到曾经存在于 ARCH 和 Board 之间的 machine 层级由于最新的ARM64架构引入了 device tree 的缘故， 已经将 machine 概念删除了， 在当前 u-boot 中看到的 <code class="language-plaintext highlighter-rouge">mach-xxx</code> 的目录或文件就属于 machine 层级， 虽然 u-boot 还未更新相关的架构概念， 但在开发层面 u-boot 和 linux 内核几乎同时适用了 device tree， 这意味着 u-boot 也很可能在之后的更新中删除类似的 <code class="language-plaintext highlighter-rouge">mach-xxx</code> 文件。</p>

<h4 id="311-举例从-kconfig-自底向上">3.1.1 举例——从 Kconfig 自底向上</h4>

<p>从 <code class="language-plaintext highlighter-rouge">Kconfig</code> 中自底向上梳理整个编译框架， 假设我们使用的目标板是 rockchip-px30 系列的 evb-px30， 那么 <code class="language-plaintext highlighter-rouge">board/rockchip/evb_px30</code> 文件夹中定义了目标板的一些依赖代码， 在 <code class="language-plaintext highlighter-rouge">include/configs/evb_px30.h</code> 会有该目标板的配置信息， 类似的配置信息和编译是息息相关的需要格外留意。</p>

<p>从顶层的 <code class="language-plaintext highlighter-rouge">board/rockchip/evb_px30/Kconfig</code> 查看， 可以找到 <code class="language-plaintext highlighter-rouge">TARGET_EVB_PX30</code> 整个关键量以及定义的 <code class="language-plaintext highlighter-rouge">BORAD</code>， <code class="language-plaintext highlighter-rouge">VENDOR</code> 等编译相关的变量。</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># board/rockchip/evb_px30/Kconfig</span>
if TARGET_EVB_PX30

config SYS_BOARD
    default <span class="s2">"evb_px30"</span>

config SYS_VENDOR
    default <span class="s2">"rockchip"</span>

config SYS_CONFIG_NAME
    default <span class="s2">"evb_px30"</span>

config BOARD_SPECIFIC_OPTIONS <span class="c1"># dummy</span>
    def_bool y

endif
</code></pre></div></div>

<p>顺着前述所提及的关键量， 在 <code class="language-plaintext highlighter-rouge">arch/arm/mach-rockchip/px30/Kconfig</code> 中能找到引用信息（尤其是 source 了前述的 <code class="language-plaintext highlighter-rouge">Kconfig</code> 文件）， 由于当前使用的就是 evb-px30 板， <code class="language-plaintext highlighter-rouge">EVB_PX30</code> 该 <code class="language-plaintext highlighter-rouge">bool</code> 变量是 <code class="language-plaintext highlighter-rouge">true</code>。 可以看到该 <code class="language-plaintext highlighter-rouge">Kconfig</code> 文件在框架中属于亟待更新的 machine 层级， 所以在该部分可以看到 <code class="language-plaintext highlighter-rouge">SYS_SOC</code> 这个配置变量。 在该 <code class="language-plaintext highlighter-rouge">Kconfig</code> 文件中还覆盖定义了 <code class="language-plaintext highlighter-rouge">SYS_MALLOC_F_LEN</code> 和 <code class="language-plaintext highlighter-rouge">SPL_SERIAL_SUPPORT</code>。</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># arch/arm/mach-rockchip/px30/Kconfig</span>
if ROCKCHIP_PX30

config TARGET_EVB_PX30
    bool <span class="s2">"EVB_PX30"</span>
    select BOARD_LATE_INIT

config SYS_SOC
    default <span class="s2">"rockchip"</span>

config SYS_MALLOC_F_LEN
    default 0x400

config SPL_SERIAL_SUPPORT
    default y

source <span class="s2">"board/rockchip/evb_px30/Kconfig"</span>

endif
</code></pre></div></div>

<p>在更上一级目录则看到更为通用的 <code class="language-plaintext highlighter-rouge">Kconfig</code> 文件会配置 <code class="language-plaintext highlighter-rouge">ROCKCHIP_PX30</code> 这个定义量。 可以看到在该目录下配置了 px30 系列使用默认配置。 我们再向上一级的查找 <code class="language-plaintext highlighter-rouge">ARCH_ROCKCHIP</code> 变量以其找到顶层的 <code class="language-plaintext highlighter-rouge">xxx_defconfig</code> 配置文件。</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># arch/arm/mach-rockchip/Kconfig</span>
if ARCH_ROCKCHIP

config ROCKCHIP_PX30
    bool <span class="s2">"Support Rockchip PX30"</span>
    select ARM64 if !ARM64_BOOT_AARCH32
    select GICV2
    select ARM_SMCCC
    select SUPPORT_SPL
    select SUPPORT_TPL
    select SPL if !ARM64_BOOT_AARCH32
    select TPL if !ARM64_BOOT_AARCH32
    select TPL_TINY_FRAMEWORK if TPL

    imply SPL_SEPARATE_BSS
    imply SPL_SERIAL_SUPPORT
    imply TPL_SERIAL_SUPPORT
    help
      The Rockchip PX30 is a ARM-based SoC with a quad-core Cortex-A35
      including NEON and GPU, Mali-400 graphics, several DDR3 options
      and video codec support. Peripherals include Gigabit Ethernet,
      USB2 host and OTG, SDIO, I2S, UART, SPI, I2C and PWMs.

if ROCKCHIP_PX30

config TPL_LDSCRIPT
    default <span class="s2">"arch/arm/mach-rockchip/u-boot-tpl-v8.lds"</span>

config TPL_TEXT_BASE
    default 0xff0e1000

config TPL_MAX_SIZE
    default 10240

config ROCKCHIP_RK3326
    bool <span class="s2">"Support Rockchip RK3326 "</span>
    help
      RK3326 can use most code from PX30, but at some situations we have
      to distinguish between RK3326 and PX30, so this macro gives help.
      It is usually selected in rk3326 board defconfig.
endif
...
</code></pre></div></div>

<p>在更上一级， 我们先找到了 <code class="language-plaintext highlighter-rouge">arch/arm/Kconfig</code>， ARCH 层级的默认配置。</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># arch/arm/Kconfig</span>
...
config ARCH_ROCKCHIP
    bool <span class="s2">"Support Rockchip SoCs"</span>
    select OF_CONTROL
    select BLK
    select DM
    select SPL_DM if SPL
    select SYS_MALLOC_F
    select SYS_THUMB_BUILD if !ARM64
    select SPL_SYS_MALLOC_SIMPLE if SPL
    imply DM_GPIO
    select DM_SERIAL
    select DM_SPI
    select DM_SPI_FLASH
    select DM_USB if USB
    select CMD_ROCKUSB if USB_GADGET_DOWNLOAD
    select ENABLE_ARM_SOC_BOOT0_HOOK
    select SYS_NS16550
    select SPI
    select DEBUG_UART_BOARD_INIT
    select PANIC_HANG
    imply DM_MMC
    imply DM_I2C
    imply DM_PWM
    imply DM_REGULATOR
    imply CMD_FASTBOOT
    imply FASTBOOT
    imply FAT_WRITE
    imply USB_FUNCTION_FASTBOOT
    imply USB_FUNCTION_ROCKUSB
    imply SPL_SYSRESET
    imply TPL_SYSRESET
    imply ADC
    imply SARADC_ROCKCHIP
...
</code></pre></div></div>

<p>最终我们能在 <code class="language-plaintext highlighter-rouge">configs/evb-px30_defconfig</code><strong>(Target)</strong> 中找到用户自定义的基本宏信息， 另外一些信息则在前述提及的配置文件中。 例如 <code class="language-plaintext highlighter-rouge">include/configs/px30_common.h</code>， <code class="language-plaintext highlighter-rouge">include/configs/evb_px30.h</code>， 以及 <code class="language-plaintext highlighter-rouge">include/configs/rockchip-common.h</code>。 我们自底向上， 特定的板级文件开始溯源， 找到了最终顶层的配置文件。 根据顶层的配置文件以及每个层级的配置文件可以梳理出编译特定板所需的功能。 另外， 在底层的 TARGET 的配置中可以看到诸如 <code class="language-plaintext highlighter-rouge">SYS_xxx</code> 的一系列配置， 这些配置会在更上层的 <code class="language-plaintext highlighter-rouge">arch/Kconfig</code> 中定义。 所以综上可以总结出如下配置关系图。</p>

<div class="mermaid" align="center">
flowchart
    subgraph Target
        evb-px30_defconfig
    end
    subgraph arch
        subgraph arm
            subgraph mach-rockchip
                subgraph px30
                Board/evb-px30
                end
            end
        end
    end
    style Target fill:#FF6A6A,stroke:#363636,stroke-width:2px,color:#F5F5F5
    style evb-px30_defconfig fill:#F5F5DC,color:#8B8378
    style arch fill:#4A708B,stroke:#363636,stroke-width:2px,color:#F5F5F5
    style arm fill:#838B8B,stroke:#363636,color:#F5F5F5
    style mach-rockchip fill:#6CA6CD,stroke:#363636,color:#F5F5F5
    style px30 fill:#4A708B,stroke:#363636,color:#F5F5F5
    style Board/evb-px30 fill:#F5F5DC,color:#8B8378
    Target -.-&gt; arch
</div>

<h3 id="32-boot-loader-stage">3.2 Boot Loader Stage</h3>

<p>BLx(Boot Loader Stage) 指代 Boot Loader 的各个阶段， 具体的划分根据 u-boot 初始化时所在存储设备略有不同， 一般将 u-boot 启动划分为 4 个阶段， BL0， BL1， BL2， BL3。值得注意的是这与 ARM TrustZone 的划分非属同源， 在 ARM TrustZone 的划分中， u-boot 属于 BL33 Non-secure 部分。</p>

<ul>
  <li><strong>BL0</strong>， SOC 生产厂家固化在 iROM(Internal ROM) 中的启动代码， 主要负责加载 BL1 的程序， 该部分被称作 Initial Program Loader (IPL) 或者 Primary Program Loader (PPL)。</li>
  <li><strong>BL1</strong>， 该部分被称为 SPL(Secondary Program Loader)， 若 SPL 部分仍超过了 flash 存储限制， 首先会通过 TPL(Trinary Program Loader) 进行更简洁的初始化如 DDR 部分的初始化，以保证代码体积极小， 之后再从指定位置加载 SPL 继续执行初始化。</li>
  <li><strong>BL2</strong>， 该阶段 u-boot 运行程序重定位之前的部分， 主要负责一系列初始化操作以及构建 C 语言的运行环境， 最为关键的是将 u-boot 重定位至 DRAM/SDRAM 中继续执行 BL3 阶段的程序。</li>
  <li><strong>BL3</strong>， 在该阶段实质上加载了u-boot， 当然通过 ATF(Architecture Trusted Firmware) 加载也是可以的。 该阶段在负责初始化 SOC 的外设， 准备内核启动参数以及加载运行内核等操作。</li>
</ul>

<div align="center">
    <img src="/norobots/images/2023-02-27-uboot-concept/bootloader-startup-sequence.png" alt="Boot loader sequences, HouchengLin" width="600" />
    <br />
    <font size="2" color="#999"><u>Boot loader sequences, HouchengLin</u></font>
</div>

<p>根据以上描述， 以图例形式表述 u-boot 的启动流程应当如下所示。</p>

<div class="mermaid" align="center">
flowchart LR
    p1(BootROM)
    p2(TPL, optional)
    p3(SPL)
    p4(ATF, optional)
    p5(U-Boot)
    p6(Kernel)
    style p1 fill:#4F94CD,stroke:#363636,stroke-width:2px,color:#F5F5F5
    style p2 fill:#DCDCDC,stroke:#363636,color:#8B8B7A,color:#696969
    style p3 fill:#DCDCDC,stroke:#363636,color:#8B8B7A,color:#696969
    style p4 fill:#8B1A1A,stroke:#363636,color:#F5F5F5
    style p5 fill:#4F94CD,stroke:#363636,stroke-width:2px,color:#F5F5F5
    style p6 fill:#FF6A6A,stroke:#363636,stroke-width:2px,color:#F5F5F5
    p1 --&gt; p2 --&gt; p3 --&gt; p4 --&gt; p5 --&gt; p6
    p1 -.-&gt; p3
    p3 -.-&gt; p5
    p1 ==&gt; p5
</div>

<h2 id="4-浅析-tpl">4. 浅析 TPL</h2>

<p>嵌入式的代码铁定有个名为 <code class="language-plaintext highlighter-rouge">start.S</code> 的入口汇编代码， 但在进行源码分析之前， 我比较喜欢阅读链接脚本以此获悉 u-boot 的构成以及分析启动过程中的一些工作。 在 <code class="language-plaintext highlighter-rouge">arch/arm/cpu/armv8</code> 目录下有两个 <code class="language-plaintext highlighter-rouge">lds</code> 文件， armv8 的 BootROM $\rightarrow$ u-boot 的引导使用 <code class="language-plaintext highlighter-rouge">u-boot.lds</code> 进行链接， 而在 u-boot 之前存在 SPL/TPL 阶段则会使用 <code class="language-plaintext highlighter-rouge">u-boot-spl.lds</code> 或 <code class="language-plaintext highlighter-rouge">arch/arm/mach-rockchip/u-boot-tpl-v8.lds</code> 进行链接。</p>

<p>在上述流程中提及 TPL 的存在， 这也是让我比较困惑的， TPL 如何 与 SPL 进行配合实现对 bootloader 的引导启动， 这一块内容值得深入探究。 不妨先从 TPL 的链接脚本入手， 厘清 TPL 阶段的相关逻辑。</p>

<blockquote>
  <p>这两篇文章关于 <code class="language-plaintext highlighter-rouge">u-boot-spl.lds</code> 有着不同详略的解析， 可以用以了解 u-boot 相关的链接脚本的 section 的基本功能以及了解链接脚本的基本概念， 这些内容已有前人做了充分的解析不再赘述。</p>

  <ul>
    <li><a href="https://blog.csdn.net/u013440753/article/details/105879835">Armv8架构UBOOT 启动篇——SPL(u-boot-spl.lds链接脚本), Kernel_Nuts</a></li>
    <li><a href="https://blog.csdn.net/maybeYoc/article/details/122937844">ARMv8架构u-boot启动流程详细分析(一), 内核新视界</a></li>
  </ul>
</blockquote>

<h3 id="41-tpl-configurations">4.1 TPL Configurations</h3>

<p>根据前述配置， evb-px30 在启动时会经由 TPL 以及 SPL 引导 u-boot。 在 <code class="language-plaintext highlighter-rouge">arch/arm/mach-rockchip/Kconfig</code> 中可以看到与 TPL 相关的一些定义：<code class="language-plaintext highlighter-rouge">TPL</code>， <code class="language-plaintext highlighter-rouge">TPL_TINY_FRAMEWORK</code>， <code class="language-plaintext highlighter-rouge">TPL_TINY_FRAMEWORK</code>， <code class="language-plaintext highlighter-rouge">TPL_LDSCRIPT</code>， <code class="language-plaintext highlighter-rouge">TPL_TEXT_BASE</code>， <code class="language-plaintext highlighter-rouge">TPL_MAX_SIZE</code>， <code class="language-plaintext highlighter-rouge">SUPPORT_TPL</code>, 这些宏定义会影响后续编译的过程。</p>

<p>其中， <code class="language-plaintext highlighter-rouge">CONFIG_TPL_BUILD</code> 这个宏定义非常重要。 网上很多博客提及相关内容仅说明在定义 <code class="language-plaintext highlighter-rouge">CONFIG_TPL</code> 之后 <code class="language-plaintext highlighter-rouge">CONFIG_TPL_BUILD</code> 会自动定义， 但没有详细说明具体位置。 在 <code class="language-plaintext highlighter-rouge">scripts/Makefile.autoconf</code> 文件的 85-87 行可以看到几行规则， 实际上向 <code class="language-plaintext highlighter-rouge">tpl/u-boot.cfg</code> 传递了 <code class="language-plaintext highlighter-rouge">CONFIG_SPL_BUILD</code>， <code class="language-plaintext highlighter-rouge">CONFIG_TPL_BUILD</code> 这两个量。 在其他任何 <code class="language-plaintext highlighter-rouge">config.mk</code>，<code class="language-plaintext highlighter-rouge">Kconfig</code>， <code class="language-plaintext highlighter-rouge">Kbuild</code> 这样的文件中都不会找到这两个量的定义。</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># scripts/Makefile.autoconf
</span><span class="nl">tpl/u-boot.cfg</span><span class="o">:</span> <span class="nf">include/config.h FORCE</span>
    <span class="err">$(Q)mkdir</span> <span class="err">-p</span> <span class="nf">$(</span><span class="nb">dir</span> <span class="nv">$@</span><span class="p">)</span>
    <span class="nf">$(</span><span class="nb">call</span> cmd,u_boot_cfg,-DCONFIG_SPL_BUILD <span class="nt">-DCONFIG_TPL_BUILD</span><span class="p">)</span>
</code></pre></div></div>

<p>另外在顶层的 <code class="language-plaintext highlighter-rouge">Makefile</code> 文件我们可以找到这样一则规则， 是 <code class="language-plaintext highlighter-rouge">script/Makefile.autoconf</code> 的上一级引用。</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Makefile
</span><span class="nl">u-boot.cfg spl/u-boot.cfg tpl/u-boot.cfg</span><span class="o">:</span> <span class="nf">include/config.h FORCE</span>
    <span class="err">$(Q)$(MAKE)</span> <span class="err">-f</span> <span class="err">$(srctree)/scripts/Makefile.autoconf</span> <span class="err">$(@)</span>
</code></pre></div></div>

<p>而当我们查看 <code class="language-plaintext highlighter-rouge">script/Makefile.autoconf</code> 所描述的功能时， 可以看到前述的 <code class="language-plaintext highlighter-rouge">CONFIG_SPL_BUILD</code>， <code class="language-plaintext highlighter-rouge">CONFIG_TPL_BUILD</code> 以及其他生成的宏定义最终会被转移到 <code class="language-plaintext highlighter-rouge">Kconfig</code> 中以完成全局性的定义。</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># This helper makefile is used for creating
#  - symbolic links (arch/$ARCH/include/asm/arch
#  - include/autoconf.mk, {spl,tpl}/include/autoconf.mk
#  - include/config.h
#
# When our migration to Kconfig is done
# (= When we move all CONFIGs from header files to Kconfig)
# this makefile can be deleted.
</span></code></pre></div></div>

<h3 id="42-tpl-linker-script">4.2 TPL Linker Script</h3>

<p>BootROM 完成基本的初始化后首先会在 iRAM 中载入 TPL 段的运行代码。</p>

<div class="language-make highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">OUTPUT_FORMAT(</span><span class="s2">"elf64-littleaarch64"</span><span class="err">,</span> <span class="s2">"elf64-littleaarch64"</span><span class="err">,</span> <span class="s2">"elf64-littleaarch64"</span><span class="err">)</span>
<span class="err">OUTPUT_ARCH(aarch64)</span>
<span class="err">ENTRY(_start)</span>
<span class="err">SECTIONS</span>
<span class="err">{</span>
    <span class="nv">.</span> <span class="o">=</span> 0x00000000<span class="p">;</span>

    <span class="nl">.text </span><span class="o">:</span> <span class="nf">{</span>
        <span class="nv">.</span> <span class="o">=</span> ALIGN<span class="o">(</span>8<span class="o">)</span><span class="p">;</span>
        <span class="err">*(.__image_copy_start)</span>
        <span class="err">CPUDIR/start.o</span> <span class="err">(.text*)</span>
        <span class="err">*(.text*)</span>
    <span class="err">}</span>

    <span class="nl">.rodata </span><span class="o">:</span> <span class="nf">{</span>
        <span class="nv">.</span> <span class="o">=</span> ALIGN<span class="o">(</span>8<span class="o">)</span><span class="p">;</span>
        <span class="err">*(SORT_BY_ALIGNMENT(SORT_BY_NAME(.rodata*)))</span>
    <span class="err">}</span>

    <span class="nl">.data </span><span class="o">:</span> <span class="nf">{</span>
        <span class="nv">.</span> <span class="o">=</span> ALIGN<span class="o">(</span>8<span class="o">)</span><span class="p">;</span>
        <span class="err">*(.data*)</span>
    <span class="err">}</span>

    <span class="nl">.u_boot_list </span><span class="o">:</span> <span class="nf">{</span>
        <span class="nv">.</span> <span class="o">=</span> ALIGN<span class="o">(</span>8<span class="o">)</span><span class="p">;</span>
        <span class="err">KEEP(*(SORT(.u_boot_list*)));</span>
    <span class="err">}</span>

    <span class="nl">.image_copy_end </span><span class="o">:</span> <span class="nf">{</span>
        <span class="nv">.</span> <span class="o">=</span> ALIGN<span class="o">(</span>8<span class="o">)</span><span class="p">;</span>
        <span class="err">*(.__image_copy_end)</span>
    <span class="err">}</span>

    <span class="nl">.end </span><span class="o">:</span> <span class="nf">{</span>
        <span class="nv">.</span> <span class="o">=</span> ALIGN<span class="o">(</span>8<span class="o">)</span><span class="p">;</span>
        <span class="err">*(.__end)</span>
    <span class="err">}</span>

    <span class="nv">_image_binary_end</span> <span class="o">=</span> .<span class="p">;</span>

    <span class="nl">.bss_start (NOLOAD) </span><span class="o">:</span> <span class="nf">{</span>
        <span class="nv">.</span> <span class="o">=</span> ALIGN<span class="o">(</span>8<span class="o">)</span><span class="p">;</span>
        <span class="err">KEEP(*(.__bss_start));</span>
    <span class="err">}</span>

    <span class="nl">.bss (NOLOAD) </span><span class="o">:</span> <span class="nf">{</span>
        <span class="err">*(.bss*)</span>
         <span class="nv">.</span> <span class="o">=</span> ALIGN<span class="o">(</span>8<span class="o">)</span><span class="p">;</span>
    <span class="err">}</span>

    <span class="nl">.bss_end (NOLOAD) </span><span class="o">:</span> <span class="nf">{</span>
        <span class="err">KEEP(*(.__bss_end));</span>
    <span class="err">}</span>

    <span class="nl">/DISCARD/ </span><span class="o">:</span> <span class="nf">{ *(.dynsym) }</span>
    <span class="nl">/DISCARD/ </span><span class="o">:</span> <span class="nf">{ *(.dynstr*) }</span>
    <span class="nl">/DISCARD/ </span><span class="o">:</span> <span class="nf">{ *(.dynamic*) }</span>
    <span class="nl">/DISCARD/ </span><span class="o">:</span> <span class="nf">{ *(.plt*) }</span>
    <span class="nl">/DISCARD/ </span><span class="o">:</span> <span class="nf">{ *(.interp*) }</span>
    <span class="nl">/DISCARD/ </span><span class="o">:</span> <span class="nf">{ *(.gnu*) }</span>
<span class="err">}</span>

<span class="c">#if defined(CONFIG_TPL_MAX_SIZE)
</span><span class="err">ASSERT(__image_copy_end</span> <span class="err">-</span> <span class="err">__image_copy_start</span> <span class="err">&lt;</span> <span class="err">(CONFIG_TPL_MAX_SIZE),</span> <span class="err">\</span>
 <span class="s2">"TPL image too big"</span><span class="err">);</span>
<span class="c">#endif
</span>
<span class="c">#if defined(CONFIG_TPL_BSS_MAX_SIZE)
</span><span class="err">ASSERT(__bss_end</span> <span class="err">-</span> <span class="err">__bss_start</span> <span class="err">&lt;</span> <span class="err">(CONFIG_TPL_BSS_MAX_SIZE),</span> <span class="err">\</span>
 <span class="s2">"TPL image BSS too big"</span><span class="err">);</span>
<span class="c">#endif
</span>
<span class="c">#if defined(CONFIG_TPL_MAX_FOOTPRINT)
</span><span class="err">ASSERT(__bss_end</span> <span class="err">-</span> <span class="err">_start</span> <span class="err">&lt;</span> <span class="err">(CONFIG_TPL_MAX_FOOTPRINT),</span> <span class="err">\</span>
 <span class="s2">"TPL image plus BSS too big"</span><span class="err">);</span>
<span class="c">#endif
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ENTRY(_start)</code> 实际上声明了程序的入口地址， 对 TPL 而言这是显而易见的， 因为 TPL 需要在该阶段获得程序的控制权完成一系列基本的初始化进程。 与其他 <code class="language-plaintext highlighter-rouge">ld</code> 文件不同的是， TPL 的链接脚本对 TPL 程序本身的大小有严格的控制。 在 machine 级的 <code class="language-plaintext highlighter-rouge">arch/arm/mach-rockchip/Kconfig</code> 中我们定义了 <code class="language-plaintext highlighter-rouge">TPL_MAX_SIZE</code>， 这使得我们可以检查 TPL image 的大小以满足 iRAM 的空间限制要求。一般来说，<code class="language-plaintext highlighter-rouge">__image_copy_start</code> 和 <code class="language-plaintext highlighter-rouge">__image_copy_end</code> 这两个变量常用来辅助 u-boot 的重定位， 但在此处被赋予了新的功能。 另外可以看到 <code class="language-plaintext highlighter-rouge">bss</code> 段都被声明了 <code class="language-plaintext highlighter-rouge">NOLOAD</code> 属性， 这意味着 <code class="language-plaintext highlighter-rouge">bss</code> 段在 image 中并不占用任何空间， 但相关的地址信息会被保留用以在 u-boot加载时的一些数据初始化操作。 因而可以归纳得到 TPL 加载时实际的内存分布情况。</p>

<div align="center">
    <img src="/norobots/images/2023-02-27-uboot-concept/mem.png" alt="TPL Loading Memory, HangX-Ma" width="300" />
    <br />
    <font size="2" color="#999"><u>TPL Loading Memory, HangX-Ma</u></font>
</div>

<p>另外可以从 <code class="language-plaintext highlighter-rouge">ld</code> 文件中看到， 入口程序是 <code class="language-plaintext highlighter-rouge">CPUDIR/start.o</code>, <code class="language-plaintext highlighter-rouge">CPUDIR</code> 可以依据层级划分从各个较为顶层的 <code class="language-plaintext highlighter-rouge">Makefile</code> 文件中找到具体定义。 但根据架构分析中的概念， 不难得出此处的 <code class="language-plaintext highlighter-rouge">CPUDIR</code> 是 <code class="language-plaintext highlighter-rouge">arch/arm/armv8</code>。 <code class="language-plaintext highlighter-rouge">start.S</code> 最终会定位到 <code class="language-plaintext highlighter-rouge">_main</code> 程序入口继续执行流程。（关于 <code class="language-plaintext highlighter-rouge">start.S</code> 的详细流程可以参考  <a href="https://blog.csdn.net/maybeYoc/article/details/122960357">ARMv8架构u-boot启动流程详细分析(二), 内核新视界</a> 由于我们的编译是 AArch64 架构， 那么 C Runtime Environment 的建立也应当是 <code class="language-plaintext highlighter-rouge">crt0_64.S</code>， 可以在这个文件中看到， <code class="language-plaintext highlighter-rouge">board_init_f_alloc_reserve</code>， <code class="language-plaintext highlighter-rouge">board_init_f_init_reserve</code>， <code class="language-plaintext highlighter-rouge">board_init_f_boot_flags</code> 几个函数通过在栈顶预留内存来达到给 <code class="language-plaintext highlighter-rouge">GD(Global Data)</code> 开辟内存空间， 在 AArch64 架构中 <code class="language-plaintext highlighter-rouge">GD</code> 指针地址会被保留在 <code class="language-plaintext highlighter-rouge">x18</code> 寄存器中供全局使用， 之后跳转到 <code class="language-plaintext highlighter-rouge">board_init_f</code>。 这是一个分水岭， TPL， SPL 以及 u-boot 都会执行这个函数。</p>

<p>一般来说可以将 u-boot 的启动过程划分为两个阶段， 也就是前述的 BL2 和 BL3 的区分。 Pre-relocation(<code class="language-plaintext highlighter-rouge">common/board_f.c</code>)， 此处的 <code class="language-plaintext highlighter-rouge">f</code> 表示程序执行所在的存储介质是 <code class="language-plaintext highlighter-rouge">flash</code>， 以及 After-relocation(<code class="language-plaintext highlighter-rouge">common/board_r.c</code>)， 此处的 <code class="language-plaintext highlighter-rouge">r</code> 表示程序执行所在的存储介质是 <code class="language-plaintext highlighter-rouge">RAM</code>。</p>

<p>我们知道 TPL 只完成一些很基本的初始化流程， 对于 TPL 而言实际上不存在重定位的需求， 所以关键就在 <code class="language-plaintext highlighter-rouge">board_init_f</code> 这个函数。</p>

<ul>
  <li>SPL： <code class="language-plaintext highlighter-rouge">arch/arm/mach-rockchip/spl.c</code></li>
  <li>TPL： <code class="language-plaintext highlighter-rouge">arch/arm/mach-rockchip/tpl.c</code></li>
  <li>U-Boot： <code class="language-plaintext highlighter-rouge">common/board_f.c</code></li>
</ul>

<p>在编译链接时， 编译组件就会对这几个文件进行区分， 以保证绑定正确的可执行文件。 在 <code class="language-plaintext highlighter-rouge">arch/arm/mach-rockchip/Makefile</code> 中就巧妙的在编译 TPL 文件时取消了 SPL 相关文件的生成， 而在编译 SPL 文件时则不受 TPL 的相关定义影响。</p>

<p>根据之前的宏定义梳理的在 TPL 阶段的 <code class="language-plaintext highlighter-rouge">board_init_f</code> 所做的工作如下， 时钟初始化， CPU 部分初始化， UART 串口初始化， SDRAM 初始化。 这些工作都完成之后会通过 <code class="language-plaintext highlighter-rouge">arch/arm/mach-rockchip/Kconfig</code> 默认定义的 <code class="language-plaintext highlighter-rouge">TPL_ROCKCHIP_BACK_TO_BROM</code> 宏引导的 <code class="language-plaintext highlighter-rouge">back_to_bootrom</code> 返回 BootROM 阶段再进行下一阶段的 SPL。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>board_init_f
    rockchip_stimer_init
    arch_cpu_init
    debug_uart_init
    timer_init
    sdram_init
    back_to_bootrom
</code></pre></div></div>

<div class="mermaid" align="center">
flowchart LR
    p1(BootROM)
    p2(TPL)
    p3(SPL)
    p4(U-Boot)
    p5(Kernel)
    style p1 fill:#4F94CD,stroke:#363636,stroke-width:2px,color:#F5F5F5
    style p2 fill:#DCDCDC,stroke:#363636,color:#8B8B7A,color:#696969
    style p3 fill:#DCDCDC,stroke:#363636,color:#8B8B7A,color:#696969
    style p4 fill:#4F94CD,stroke:#363636,stroke-width:2px,color:#F5F5F5
    style p5 fill:#FF6A6A,stroke:#363636,stroke-width:2px,color:#F5F5F5
    p1 -.-&gt;|stage 1 'init'| p2
    p2 -.-&gt;|stage 2 'back to rom'| p1
    p1 --&gt;|stage 3| p3
    p3 --&gt; p4
    p4 --&gt; p5
</div>

<p>至于 SPL 的具体流程可以参考 TPL 的流程进行推导相关的资料也非常详细， 在<a href="#6-参考">参考</a>部分的 <a href="#61-u-boot">U-Boot</a> 部分已经列举了筛选过的较好的资料可供选读。</p>

<h2 id="5-总结">5. 总结</h2>

<p>文章对 u-boot 学习路线进行了简单介绍， 并从 u-boot 构建框架着手解构 u-boot， 以 Kconfig 为索引文件自底向上分析框架。 除此之外还介绍了 Boot Loader 的几个基本流程， 对其中的 TPL 过程进行了剖析。后续会在此篇博文的基础上进行增改扩充基础概念部分， 而其他需要仔细剖析的部分则另建博文进行阐述。</p>

<h2 id="6-参考">6. 参考</h2>

<h3 id="61-u-boot">6.1 U-Boot</h3>

<ul>
  <li><a href="https://www.cnblogs.com/xiaojiang1025/p/6496704.html">从0移植uboot (二) _uboot启动流程分析, Abnor</a></li>
  <li><a href="http://www.wowotech.net/sort/u-boot">u-boot分析(文章类), wowo</a></li>
  <li><a href="http://www.wowotech.net/x_project/bubblegum_uboot_porting.html">X-003-UBOOT-基于Bubblegum-96平台的u-boot移植说明, wowo</a></li>
  <li><a href="https://wowothink.com/146db8db/">u-boot启动流程, wowothink</a></li>
  <li><a href="https://blog.csdn.net/maybeYoc/article/details/122937844">ARMv8架构u-boot启动流程详细分析(一), 内核新视界</a></li>
  <li><a href="https://blog.csdn.net/maybeYoc/article/details/122960357">ARMv8架构u-boot启动流程详细分析(二), 内核新视界</a></li>
  <li><a href="https://blog.csdn.net/u013440753/article/details/105897679">Armv8架构UBOOT 启动篇——SPL(start.S), Kernel_Nuts</a></li>
  <li><a href="https://blog.csdn.net/u013440753/article/details/105879835">Armv8架构UBOOT 启动篇——SPL(u-boot-spl.lds链接脚本), Kernel_Nuts</a></li>
  <li><a href="https://elinux.org/images/d/d6/U-Boot-Bootloader-for-IoT-Platform-Alexey-Brodkin-Synopsys-2.pdf">U-Boot - Bootloader for IoT Platform? [ELCE 2018], Alexey Brodkin, Synopsys</a></li>
  <li><a href="https://www.slideshare.net/HouchengLin/uboot-startup-sequence">U-boot startup sequence, HouchengLin</a></li>
</ul>

<h3 id="62-arm-参考手册">6.2 ARM 参考手册</h3>

<ul>
  <li><a href="https://developer.arm.com/documentation/100076/0100/">Arm® Instruction Set Reference Guide</a></li>
  <li><a href="https://developer.arm.com/documentation/dui0068/b/ARM-Instruction-Reference">ARM Developer Suite Assembler Guide</a></li>
  <li><a href="https://developer.arm.com/documentation/ddi0487/ia/">Arm Architecture Reference Manual for A-profile architecture</a></li>
  <li><a href="https://developer.arm.com/documentation/100236/0100/">Arm Cortex-A35 Processor Technical Reference Manual</a></li>
  <li><a href="https://developer.arm.com/documentation/espc0003/1-0/?lang=en">ARM ELF Specification</a></li>
</ul>

<h3 id="63-aarch64-架构">6.3 AArch64 架构</h3>

<ul>
  <li><a href="https://developer.arm.com/documentation/101811/latest">Learn the architecture - AArch64 memory management</a></li>
  <li><a href="https://developer.arm.com/documentation/102406/latest/">Learn the architecture - Introduction to security</a></li>
  <li><a href="https://developer.arm.com/documentation/102412/latest">Learn the architecture - AArch64 Exception Model</a></li>
  <li><a href="https://developer.arm.com/documentation/102418/latest/">Learn the architecture - TrustZone for AArch64</a></li>
</ul>]]></content><author><name>HangX-Ma</name></author><category term="u-boot" /><category term="Linux" /><summary type="html"><![CDATA[学习 u-boot 启动流程有些时日了， 虽然看了大量的文章以及在此期间仔细阅读源码， 但是仍感觉很多知识点掌握不深刻容易遗忘，不如在写博文的时候重溯整个流程， 也分享关于 u-boot 的学习方式。]]></summary></entry></feed>